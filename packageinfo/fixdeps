#!/bin/bash

cachenpm() {
	$(dirname ${BASH_SOURCE[0]})/../nodejs/cachenpm $@
}

checkdeps() {
	$(dirname ${BASH_SOURCE[0]})/checkdeps
}

checkpython() {
	$(dirname ${BASH_SOURCE[0]})/../checkpython $@
}

csvmanifest() {
	. $(dirname "${BASH_SOURCE[0]}")/csvmanifest $@
}

dirnames() {
	python $(dirname "${BASH_SOURCE[0]}")/../dirnames.py
}

fixdeps() {
	if [ ! -d modules ]; then
		return 0
	fi

	checkdeps

	# Mass compile check

	if [[ 0 -ne $(cat ${GIT_ROOT}/.redeploy/checkdeps.txt | grep -c '^') ]]; then
		cachenpm $base_remote/$BASE_BRANCH

		cd modules
		cat ${GIT_ROOT}/.redeploy/checkdeps.txt | cut -d',' -f 1 | sort -u | cut -d'/' -f 2- | tr '/' ':' | awk '{ print ":" $1 ":compileJSP :" $1 ":jar" }' | xargs $(dirname "${BASH_SOURCE[0]}")/../gw --continue | tee ${GIT_ROOT}/.redeploy/compile.txt
		cd -
	else
		local project_prefix=$(grep -F 'project.path.prefix=' gradle.properties | cut -d'=' -f 2)
		cat ${GIT_ROOT}/.redeploy/checkdeps.txt | cut -d',' -f 1 | sort -u | cut -d'/' -f 2- | tr '/' ':' | awk '{ print "'${project_prefix}':" $1 ":compileJSP '${project_prefix}':" $1 ":jar" }' | xargs $(dirname "${BASH_SOURCE[0]}")/../gw --continue | tee ${GIT_ROOT}/.redeploy/compile.txt
	fi

	# Convert the manifest to a CSV file that we can parse

	for folder in $(cat ${GIT_ROOT}/.redeploy/checkdeps.txt | cut -d',' -f 1 | sort -u); do
		local INPUT_FILE=$folder/build/tmp/jar/MANIFEST.MF

		if [ -f "$INPUT_FILE" ]; then
			csvmanifest Import $INPUT_FILE
		fi
	done

	# Process the parsed CSVs in Python

	python $(dirname "${BASH_SOURCE[0]}")/fixdeps.py

	# Modify the build.gradle that needed to change

	grep -F bnd.bnd ${GIT_ROOT}/.redeploy/lsfiles.txt | grep -vF '/src/' | xargs grep Bundle-SymbolicName | grep -vF '{' | sed 's/Bundle-SymbolicName: //g' > ${GIT_ROOT}/.redeploy/bnd.txt

	local FORMAT_SOURCE=

	for line in $(cat ${GIT_ROOT}/.redeploy/fixdeps.txt | sort -u); do
		local folder=$(echo "$line" | cut -d',' -f 1)
		local module=$(echo "$line" | cut -d',' -f 2)
		local project=$(grep ":$module$" ${GIT_ROOT}/.redeploy/bnd.txt | cut -d':' -f 1 | sed 's@modules@@' | tr '\\' '/' | dirnames | tr '/' ':')

		if [[ $module == com.liferay.portal* ]]; then
			sed -i.bak -e '/name: "'$module'"/ s/version: "[^"]*"/version: "default"/' $folder/build.gradle
		else
			sed -i.bak -e '/name: "'$module'"/ s/group: .*/project("'$project'")/' $folder/build.gradle
			FORMAT_SOURCE="$FORMAT_SOURCE $(echo $folder | sed 's@modules@@g' | tr -d '/' ':'):formatSource"
		fi
	done

	if [ "" != "$FORMAT_SOURCE" ]; then
		echo $FORMAT_SOURCE | xargs $(dirname "${BASH_SOURCE[0]}")/../gw --continue -DformatSource.format.local.changes=true
	fi

	local FAILED_COMPILE=$(grep 'compile\(JSP\|Java\) FAILED' ${GIT_ROOT}/.redeploy/compile.txt | sort)

	if [ "" == "$FAILED_COMPILE" ]; then
		return 0
	fi

	# For anything that fails to compile, try updating build.gradle and redoing

	FORMAT_SOURCE=

	for target_gradle in $(echo "$FAILED_COMPILE" | cut -d' ' -f 1 | sed 's@:compile\(JSP\|Java\)@@g' | sort -u | tr ':' '/' | awk '{ print "modules" $1 "/build.gradle" }'); do
		for folder in $(cat ${GIT_ROOT}/.redeploy/changes_gradle_1.txt ${GIT_ROOT}/.redeploy/changes_gradle_2.txt); do
			local module=$(grep 'Bundle-SymbolicName' $folder/bnd.bnd | cut -d' ' -f 2)
			local project=$(grep ":$module$" ${GIT_ROOT}/.redeploy/bnd.txt | cut -d':' -f 1 | sed 's@modules@@' | tr '\\' '/' | dirnames | tr '/' ':')

			if [[ $module == com.liferay.portal* ]]; then
				sed -i.bak -e '/name: "'$module'"/ s/version: "[^"]*"/version: "default"/' $target_gradle
			else
				sed -i.bak -e '/name: "'$module'"/ s/group: .*/project("'$project'")/' $target_gradle
				FORMAT_SOURCE="$FORMAT_SOURCE $(dirname $target_gradle | sed 's@modules@@g' | tr '/' ':'):formatSource"
			fi
		done
	done

	local RECOMPILE=$(echo $FAILED_COMPILE | cut -d' ' -f 1)

	pushd modules > /dev/null
	echo "$RECOMPILE" "$FORMAT_SOURCE" | xargs $(dirname "${BASH_SOURCE[0]}")/../gw --continue -DformatSource.format.local.changes=true | tee ${GIT_ROOT}/.redeploy/compile.txt
	popd > /dev/null

	FAILED_COMPILE=$(grep 'compile\(JSP\|Java\) FAILED' ${GIT_ROOT}/.redeploy/compile.txt | sort)

	if [ "" == "$FAILED_COMPILE" ]; then
		return 0
	fi

	# If it failed to recompile, restore the original build.gradle

	for target_gradle in $(echo "$FAILED_COMPILE" | cut -d' ' -f 1 | sed 's@:compile\(JSP\|Java\)@@g' | tr ':' '/' | awk '{ print "modules" $1 "/build.gradle" }'); do
		git checkout $target_gradle
	done

	# Report the build failure

	echo "$FAILED_COMPILE"
	return 1
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/../setopts
}

checkpython semver

if [[ 0 -ne $? ]]; then
	exit 1
fi

setopts && fixdeps