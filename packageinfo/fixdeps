#!/bin/bash

cachenpm() {
	$(dirname ${BASH_SOURCE[0]})/../nodejs/cachenpm $@
}

checkfiles() {
	local folder=$1
	local module=$2
	local package=$3

	local expression=$(cat .redeploy/gradle.txt | awk '{ print $1 "/build.gradle" }' | xargs grep -Fl '"'$module'"' | dirnames | tr '\n' '|' | sed 's@|$@@g' | sed 's@|@\\|@g' | awk '{ print "\\(" $1 "\\)" }')
	grep -h "$expression" .redeploy/java.txt .redeploy/jsp.txt | xargs grep -Fl "$package" | grep -o '.*/src/main/' | sed 's@/src/main/@@g' | sort -u | awk '{ print $1 ",'$module','$package'" }' >> .redeploy/checkdeps.txt
}

checkpython() {
	$(dirname ${BASH_SOURCE[0]})/../checkpython $@
}

checksnapshots() {
	. $(dirname "${BASH_SOURCE[0]}")/../checksnapshots
}

csvmanifest() {
	. $(dirname "${BASH_SOURCE[0]}")/csvmanifest $@
}

dirnames() {
	python $(dirname "${BASH_SOURCE[0]}")/../dirnames.py
}

fixdeps() {
	cd "$GIT_ROOT"

	# Identify the base branch

	. $(dirname "${BASH_SOURCE[0]}")/../getparent

	if [ "" == "$BASE_BRANCH" ]; then
		echo Unable to identify base branch
		return 1
	fi

	# Find the closest ancestor based on which one has the fewest commits

	local origin_remote=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/origin[^/]*/${BASE_BRANCH}$" | cut -d'/' -f 3)
	local upstream_remote=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/upstream[^/]*/${BASE_BRANCH}$" | cut -d'/' -f 3)
	local base_remote=

	if [[ $(git log --pretty='%H' ${origin_remote}/${BASE_BRANCH}..HEAD | wc -l) -gt $(git log --pretty='%H' ${upstream_remote}/${BASE_BRANCH}..HEAD | wc -l) ]]; then
		base_remote=$upstream_remote
	else
		base_remote=$origin_remote
	fi

	# Record all the possible module locations that we have to evaluate

	if [ -d modules ]; then
		git ls-files modules | grep -vF 'modules/sdk/' > .redeploy/lsfiles.txt
	else
		git ls-files . > .redeploy/lsfiles.txt
	fi

	grep -F build.gradle .redeploy/lsfiles.txt | dirnames > .redeploy/gradle.txt
	grep -F bnd.bnd .redeploy/lsfiles.txt > .redeploy/bnd.txt

	cat .redeploy/gradle.txt | awk '{ print $1 "/src/main/java" }' | xargs git ls-files | grep -F .java > .redeploy/java.txt
	cat .redeploy/gradle.txt | awk '{ print $1 "/src/main/resources/META-INF/resources" }' | xargs git ls-files | grep -F .jsp > .redeploy/jsp.txt

	# Generate the source trie

	$(dirname "${BASH_SOURCE[0]}")/../sourcetrie

	# Identify the package info files that changed since the latest branch

	git diff --name-only $base_remote/$BASE_BRANCH..HEAD > .redeploy/diff.txt
	grep -F packageinfo .redeploy/diff.txt > .redeploy/changes.txt

	if [[ 0 -eq $(cat .redeploy/changes.txt | wc -l) ]]; then
		echo No changes detected.
		return 0
	fi

	python $(dirname "${BASH_SOURCE[0]}")/../gitchanges.py

	# Loop over the modules and packages that changed to identify where the packages are used

	cat /dev/null > .redeploy/checkdeps.txt

	for folder in $(cat .redeploy/changes_ant.txt); do
		local module=$(grep -F '"manifest.bundle.symbolic.name"' $folder/build.xml | grep -o 'value="[^";]*' | cut -d'"' -f 2)

		for package in $(grep -F "$folder" .redeploy/changes.txt | sed "s@$folder/src/@@g" | dirnames | tr '/' '.'); do
			echo $module $package
			checkfiles $folder $module $package
		done
	done

	for folder in $(cat .redeploy/changes_gradle_1.txt .redeploy/changes_gradle_2.txt); do
		local module=$(grep -F 'Bundle-SymbolicName:' "$folder/bnd.bnd" | cut -d' ' -f 2)

		for package in $(grep -F "$folder" .redeploy/changes.txt | sed "s@$folder/src/main/java/@@g" | sed "s@$folder/src/main/resources/@@g" | dirnames | tr '/' '.'); do
			echo $module $package
			checkfiles $folder $module $package
		done
	done

	# Make sure that we have the right libraries in place

	checksnapshots

	# Mass compile check

	if [ -d modules ] && [[ 0 -ne $(cat .redeploy/checkdeps.txt | wc -l) ]]; then
		cachenpm $base_remote/$BASE_BRANCH

		cd modules
		cat ../.redeploy/checkdeps.txt | cut -d',' -f 1 | sort -u | cut -d'/' -f 2- | tr '/' ':' | awk '{ print ":" $1 ":compileJSP :" $1 ":jar" }' | xargs $(dirname "${BASH_SOURCE[0]}")/../gw --continue | tee ../.redeploy/compile.txt
		cd -
	else
		local project_prefix=$(grep -F 'project.path.prefix=' gradle.properties | cut -d'=' -f 2)
		cat .redeploy/checkdeps.txt | cut -d',' -f 1 | sort -u | cut -d'/' -f 2- | tr '/' ':' | awk '{ print "'${project_prefix}':" $1 ":compileJSP '${project_prefix}':" $1 ":jar" }' | xargs $(dirname "${BASH_SOURCE[0]}")/../gw --continue | tee .redeploy/compile.txt
	fi

	# Convert the manifest to a CSV file that we can parse

	for folder in $(cat .redeploy/checkdeps.txt | cut -d',' -f 1 | sort -u); do
		local INPUT_FILE=$folder/build/tmp/jar/MANIFEST.MF

		if [ -f "$INPUT_FILE" ]; then
			csvmanifest Import $INPUT_FILE
		fi
	done

	# Process the parsed CSVs in Python

	python $(dirname "${BASH_SOURCE[0]}")/fixdeps.py

	# Modify the build.gradle that needed to change

	for line in $(cat .redeploy/fixdeps.txt | sort -u); do
		local folder=$(echo "$line" | cut -d',' -f 1)
		local module=$(echo "$line" | cut -d',' -f 2)

		if [[ $module == com.liferay.portal* ]]; then
			sed -i.bak -e '/name: "'$module'"/ s/version: "[^"]*"/version: "default"/' $folder/build.gradle
		else
			sed -i.bak -e '/name: "'$module'"/ s/group: .*/project("'$project'")/' $folder/build.gradle
		fi
	done

	# For anything that fails to compile, report

	local FAILED_COMPILE=$(grep 'compile\(JSP\|Java\) FAILED' .redeploy/compile.txt | sort)

	if [ "" != "$FAILED_COMPILE" ]; then
		echo "$FAILED_COMPILE"
		return 1
	fi
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/../setopts
}

checkpython semver

if [[ 0 -ne $? ]]; then
	exit 1
fi

setopts && fixdeps