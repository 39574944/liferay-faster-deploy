#!/bin/bash

bundleinfo() {
	if ! checkfile $1 bundleinfo; then
		return 0
	fi

	echo "Generating bundle info for $1"

	for folder in $(ls -1 . | sort -u); do
		if [ -f "$folder/bnd.bnd" ]; then
			local BUNDLE_NAME="com.liferay.$(echo $folder | tr '-' '.')"

			local BUNDLE_VERSION="$(grep '^Bundle-Version' $folder/bnd.bnd | cut -d' ' -f 2-)-SNAPSHOT"

			if [ -f modules/.releng/${folder}.properties ]; then
				BUNDLE_VERSION=$(grep 'artifact.url' modules/.releng/${folder}.properties | cut -d'=' -f 2 | grep -o "/${BUNDLE_NAME}/[^/]*" | cut -d'/' -f 3)
			fi

			echo "com.liferay.portal,${BUNDLE_NAME},${BUNDLE_VERSION},public,jar" >> ${OUTPUT_FILE}
		fi
	done

	if [ "" != "$(git ls-files modules | grep -F '/.lfrbuild-portal')" ]; then
		git ls-files modules | grep -F '/.lfrbuild-portal' | \
			grep -v '^modules/aspectj/' | \
			grep -vF -- '-compat/' | \
			grep -v '^modules/post-upgrade-fix/' | \
			grep -v '^modules/sdk/' | \
			grep -v '^modules/test/' | \
			grep -v '^modules/third-party/' | \
			grep -v '^modules/util/' | \
			dirnames | sort -u > ${GIT_ROOT}/.redeploy/bundleinfo.txt
	else
		git ls-files modules | grep '/\(build.gradle\|apps/foundation/frontend-theme/.*/gulpfile.js\)$' | \
			grep -vF -- '-test/build.gradle' | \
			grep -v '^modules/apps/asset-tags-validator/' | \
			grep -v 'modules/apps/forms-and-workflow/portal-rules-engine/portal-rules-engine-sample-web/' | \
			grep -v 'modules/apps/foundation/frontend-taglib/frontend-taglib-aui-form-extension-sample/' | \
			grep -v 'modules/apps/foundation/frontend-theme/frontend-theme-product-app/' | \
			grep -v 'modules/apps/foundation/portal-cache/portal-cache-memory/' | \
			grep -v 'modules/apps/portal-search-solr/' | \
			grep -v 'modules/apps/wiki-engine-jspwiki/' | \
			grep -v '^modules/sdk/' | \
			grep -v '^modules/test/' | \
			grep -v '^modules/third-party/' | \
			grep -v '^modules/util/' | \
			dirnames | sort -u > ${GIT_ROOT}/.redeploy/bundleinfo.txt
	fi

	if [ ! -d tools/sdk ]; then
		ant setup-sdk
	fi

	local BASE_LP_VERSION=$(grep -F lp.version= tools/sdk/build.properties | cut -d'=' -f 2)

	for folder in $(cat ${GIT_ROOT}/.redeploy/bundleinfo.txt); do
		local BUNDLE_GROUP='com.liferay'
		local BUNDLE_NAME=
		local BUNDLE_VERSION=
		local PACKAGING=

		if [ -f "$folder/bnd.bnd" ]; then
			BUNDLE_NAME=$(grep '^Bundle-SymbolicName' $folder/bnd.bnd | cut -d' ' -f 2-)
		elif [ -f "$folder/package.json" ]; then
			BUNDLE_NAME=$(jq  '.liferayTheme.distName' "${folder}/package.json" | cut -d'"' -f 2)
		else
			continue
		fi

		if [ -f $folder/gulpfile.js ] && [ "" != "$(grep -F liferay-theme-tasks $folder/gulpfile.js)" ]; then
			PACKAGING=war
		else
			PACKAGING=jar
		fi

		local RELENG_FOLDER=$(echo "${folder}" | sed 's@^modules/@modules/.releng/@g')
		local ARTIFACT_URL=

		if [ -f ${RELENG_FOLDER}/artifact.properties ]; then
			ARTIFACT_URL=$(grep 'artifact.url' ${RELENG_FOLDER}/artifact.properties | cut -d'=' -f 2)

			BUNDLE_GROUP=$(echo "${ARTIFACT_URL}" | grep -o "com/liferay/.*${BUNDLE_NAME}/" | sed "s@/${BUNDLE_NAME}/@@g" | tr '/' '.')
			BUNDLE_VERSION=$(echo "${ARTIFACT_URL}" | grep -o "/${BUNDLE_NAME}/[^/]*" | cut -d'/' -f 3)
			PACKAGING=$(echo "${ARTIFACT_URL}" | grep -o "[^\\.]*$")
		elif [ -f $folder/bnd.bnd ]; then
			BUNDLE_VERSION="$(grep '^Bundle-Version' $folder/bnd.bnd | cut -d' ' -f 2-)-SNAPSHOT"
			REPOSITORY='none'
		elif [ -f $folder/package.json ]; then
			BUNDLE_VERSION="$(jq '.version' $folder/package.json | cut -d'"' -f 2)-SNAPSHOT"
			REPOSITORY='none'
		else
			BUNDLE_VERSION='0.0.0'
			REPOSITORY='none'
		fi

		local REPOSITORY='public'

		if [[ ${folder} == modules/private/* ]]; then
			REPOSITORY='private'
		fi

		echo "${BUNDLE_GROUP},${BUNDLE_NAME},${BUNDLE_VERSION},${REPOSITORY},${PACKAGING}" >> ${OUTPUT_FILE}
	done
}

checkfile() {
	OUTPUT_FILE=

	if [[ $1 == fix-pack-base-* ]]; then
		OUTPUT_FILE=${OUTPUT_FOLDER}/$2-$(echo $1 | cut -d'-' -f 4)-base.txt
	elif [[ $1 == fix-pack-* ]]; then
		OUTPUT_FILE=${OUTPUT_FOLDER}/$2-$(echo "$1" | cut -d'-' -f 5)-$(echo "$1" | cut -d'-' -f 3,4,6).txt
	else
		OUTPUT_FILE=${OUTPUT_FOLDER}/$2-$(echo "$1" | cut -d'-' -f 1 | sed 's/\.\([0-9]\)$/\.0\1/g' | tr -d '.')-$(echo "$1" | cut -d'-' -f 2-).txt
	fi

	if [ -f $OUTPUT_FILE ]; then
		echo "${OUTPUT_FILE} has already been generated"
		return 1
	fi

	if [ -f ${GIT_ROOT}/.redeploy/$1 ]; then
		return 0
	fi

	if [ "" == "$(git tag | grep -F "$1")" ]; then
		if [[ $1 == fix-pack-* ]]; then
			git fetch --no-tags git@github.com:liferay/liferay-portal-ee.git tags/$1:refs/tags/$1
		else
			git fetch --no-tags git@github.com:liferay/liferay-portal.git tags/$1:refs/tags/$1
		fi

		if [ "" == "$(git tag | grep -F "$1")" ]; then
			return 1
		fi
	fi

	git clean -xdf -e "app.server.$USER.properties" -e "build.$USER.properties"
	git reset --hard
	git checkout $1

	mkdir -p ${GIT_ROOT}/.redeploy
	touch ${GIT_ROOT}/.redeploy/$1
	$(dirname $0)/../sourcetrie
}

dependencies() {
	if [[ $1 == *-private ]]; then
		return 0
	fi

	for folder in global portal; do
		if [ "" == "$(git show ${1}:lib/${folder}/dependencies.properties 2> /dev/null)" ]; then
			return 0
		fi
	done

	for library in jsp-api mail servlet-api; do
		if [ "" == "$(git show ${1}:lib/development/dependencies.properties | grep "^${library}=")" ]; then
			return 0
		fi
	done

	if ! checkfile $1 dependencies; then
		return 0
	fi

	echo "Generating dependencies info for $1"

	for library in jsp-api mail servlet-api; do
		grep "^${library}=" lib/development/dependencies.properties | cut -d'=' -f 2 | sed 's/^\([^:]*\):\([^:]*\):/\1,\2,/g' >> ${OUTPUT_FILE}
	done

	for folder in global portal; do
		cut -d'=' -f 2 lib/${folder}/dependencies.properties | sed 's/^\([^:]*\):\([^:]*\):/\1,\2,/g' >> ${OUTPUT_FILE}
	done
}

dirnames() {
	python $(dirname $0)/../dirnames.py
}

packageinfo() {
	if ! checkfile $1 packageinfo; then
		return 0
	fi

	echo "Generating bundle packageinfo for $1"

	cat /dev/null > ${GIT_ROOT}/.redeploy/packageinfo.txt

	# Handle root projects, which might not have packageinfo files

	for folder in $(ls -1 . | sort -u); do
		if [ -f $folder/bnd.bnd ]; then
			find "$folder/src" -type f -printf '%h\n' | sort -u >> ${GIT_ROOT}/.redeploy/packageinfo.txt
		fi
	done

	# Handle modules, which always have packageinfo files

	git ls-files modules | grep -F '/packageinfo' | grep -v '^modules/sdk/' | grep -v '^modules/test/' | grep -v '^modules/util/' | dirnames | sort >> ${GIT_ROOT}/.redeploy/packageinfo.txt

	python $(dirname $0)/packageinfo.py $OUTPUT_FILE

	# Handle portal-compat modules

	packageinfo_compat
}

packageinfo_compat() {
	if [ ! -d modules/core/portal-compat ]; then
		return 0
	fi

	ant setup-sdk

	for file in $(git ls-files modules/core/portal-compat | grep -F imported-files.properties); do
		folder=$(dirname $file)

		local bundle_artifact=
		local bundle_name=$(grep '^Bundle-SymbolicName' $folder/bnd.bnd | cut -d' ' -f 2)
		local bundle_version=

		if [[ $bundle_name == com.liferay.portal.kernel* ]]; then
			bundle_artifact=com.liferay.portal.kernel
			bundle_version=$(grep -F 'com.liferay.portal.kernel' .gradle/gradle.properties | cut -d'=' -f 2)
		elif [[ $bundle_name == com.liferay.portal.impl* ]]; then
			bundle_artifact=com.liferay.portal.impl
			bundle_version=$(grep -F 'com.liferay.portal.impl' .gradle/gradle.properties | cut -d'=' -f 2)
		fi

		if [ "" == "$bundle_artifact" ]; then
			continue
		fi

		pushd $folder > /dev/null

		$(dirname ${BASH_SOURCE[0]})/../gw classes

		for packageinfofile in $(find classes -name packageinfo); do
			local package_name=$(dirname $packageinfofile | tr '/' '.' | cut -d'.' -f 2-)
			local package_version=$(cat $packageinfofile | cut -d' ' -f 2)

			echo com.liferay.portal,${bundle_artifact},${bundle_version},${package_name},${package_version} >> $OUTPUT_FILE
		done

		popd > /dev/null
	done
}

packageinfo_release() {
	GIT_ROOT="${1}"

	pushd "${GIT_ROOT}" > /dev/null

	OUTPUT_FOLDER=$(dirname $PWD)/metadata

	mkdir -p $OUTPUT_FOLDER

	git ls-remote -t git@github.com:liferay/liferay-portal.git | \
		awk '{ print $2 }' | grep ga | grep -vF sync | grep -vF 'private' | grep -F "/${2}" | \
		sort | cut -d'/' -f 3 | tee $OUTPUT_FOLDER/tags.txt

	git ls-remote -t git@github.com:liferay/liferay-portal-ee.git | \
		awk '{ print $2 }' | grep "fix-pack-\(base\|de-.*\|dxp-.*\)-${3}" | grep -v '\(test\|demo\|build\)' | \
		sort -t'-' -nk4,5 | cut -d'/' -f 3 | tee -a $OUTPUT_FOLDER/tags.txt

	for tag_id in $(cat $OUTPUT_FOLDER/tags.txt); do
		bundleinfo $tag_id
		packageinfo $tag_id
		requireschema $tag_id
		dependencies $tag_id
	done

	popd > /dev/null
}

requireschema() {
	if ! checkfile $1 requireschema; then
		return 0
	fi

	echo "Generating require schema versions for $1"

	if [ "$1" == "7.0.0-ga1" ]; then
		git ls-files modules | grep -F -- '-service/bnd.bnd' | grep -v '^modules/sdk/' | grep -v '^modules/test/' | grep -v '^modules/util/' | dirnames | sort -u > ${GIT_ROOT}/.redeploy/requireschema.txt
	else
		git ls-files modules | grep -F -- '-service/.lfrbuild-portal' | grep -v '^modules/sdk/' | grep -v '^modules/test/' | grep -v '^modules/util/' | dirnames | sort -u > ${GIT_ROOT}/.redeploy/requireschema.txt
	fi

	for folder in $(cat ${GIT_ROOT}/.redeploy/requireschema.txt); do
		if [ ! -f "$folder/bnd.bnd" ]; then
			continue
		fi

		local bnd=$folder/bnd.bnd
		local BUNDLE_NAME=$(grep '^Bundle-SymbolicName' $bnd | cut -d' ' -f 2-)
		local BUNDLE_VERSION=$(grep '^Bundle-Version' $bnd | cut -d' ' -f 2-)

		local IMPLICIT_SCHEMA_VERSION=$BUNDLE_VERSION
		local EXPLICIT_SCHEMA_VERSION=$(grep '^Liferay-Require-SchemaVersion' $bnd | cut -d' ' -f 2-)

		local SCHEMA_VERSION="$IMPLICIT_SCHEMA_VERSION (implicit)"

		if [ "" != "$EXPLICIT_SCHEMA_VERSION" ]; then
			SCHEMA_VERSION=$EXPLICIT_SCHEMA_VERSION
		fi

		echo ${BUNDLE_NAME},${SCHEMA_VERSION} >> $OUTPUT_FILE
	done
}

if [ -z "${PORTAL_SOURCE_ROOT_70}" ]; then
	echo "Please set a PORTAL_SOURCE_ROOT_70 for the build"
	exit 1
fi

if [ -z "${PORTAL_SOURCE_ROOT_71}" ]; then
	echo "Please set a PORTAL_SOURCE_ROOT_71 for the build"
	exit 1
fi

. $(dirname ${BASH_SOURCE[0]})/../setopts

if [[ 0 -ne $? ]]; then
	exit 1
fi

packageinfo_release ${PORTAL_SOURCE_ROOT_70} 7.0 70
packageinfo_release ${PORTAL_SOURCE_ROOT_71} 7.1 71