#!/bin/bash

checkfile() {
	OUTPUT_FILE=

	if [[ $1 == fix-pack-base-* ]]; then
		OUTPUT_FILE=${OUTPUT_FOLDER}/$2-7010-base.txt
	elif [[ $1 == fix-pack-* ]]; then
		OUTPUT_FILE=${OUTPUT_FOLDER}/$2-$(echo "$1" | cut -d'-' -f 5)-$(echo "$1" | cut -d'-' -f 3,4,6).txt
	else
		OUTPUT_FILE=${OUTPUT_FOLDER}/$2-$(echo "$1" | cut -d'-' -f 1 | sed 's/\.\([0-9]\)$/\.0\1/g' | tr -d '.')-$(echo "$1" | cut -d'-' -f 2-).txt
	fi

	if [ -f $OUTPUT_FILE ]; then
		echo "${OUTPUT_FILE} has already been generated"
		return 1
	fi

	if [ -f .redeploy/$1 ]; then
		return 0
	fi

	if [ "" == "$(git tag | grep -F "$1")" ]; then
		if [[ $1 == fix-pack-* ]]; then
			git fetch --no-tags git@github.com:liferay/liferay-portal-ee.git tags/$1:refs/tags/$1
		else
			git fetch --no-tags git@github.com:liferay/liferay-portal.git tags/$1:refs/tags/$1
		fi

		if [ "" == "$(git tag | grep -F "$1")" ]; then
			return 1
		fi
	fi

	git clean -xdf
	git reset --hard
	git checkout $1

	mkdir -p .redeploy
	touch .redeploy/$1
	$(dirname $0)/../sourcetrie
}

checkpython() {
	$(dirname ${BASH_SOURCE[0]})/../checkpython $@
}

dirnames() {
	python $(dirname $0)/../dirnames.py
}

packageinfo() {
	if ! checkfile $1 packageinfo; then
		return 0
	fi

	echo "Generating bundle packageinfo for $1"

	cat /dev/null > .redeploy/packageinfo.txt

	# Handle root projects, which might not have packageinfo files

	for folder in $(ls -1 . | sort -u); do
		if [ -f $folder/bnd.bnd ]; then
			find "$folder/src" -type f -printf '%h\n' | sort -u >> .redeploy/packageinfo.txt
		fi
	done

	# Handle modules, which always have packageinfo files

	git ls-files modules | grep -F '/packageinfo' | grep -vF '/sdk/' | dirnames | sort >> .redeploy/packageinfo.txt

	python $(dirname $0)/packageinfo.py $OUTPUT_FILE
}

requireschema() {
	if ! checkfile $1 requireschema; then
		return 0
	fi

	echo "Generating require schema versions for $1"

	for bnd in $(git ls-files | grep -F -- '-service/bnd.bnd' | grep -vF '/sdk/'); do
		local BUNDLE_NAME=$(grep -F Bundle-SymbolicName $bnd | cut -d' ' -f 2-)
		local BUNDLE_VERSION=$(grep -F Bundle-Version $bnd | cut -d' ' -f 2-)

		local IMPLICIT_SCHEMA_VERSION=$BUNDLE_VERSION
		local EXPLICIT_SCHEMA_VERSION=$(grep -F Liferay-Require-SchemaVersion $bnd | cut -d' ' -f 2-)

		local SCHEMA_VERSION="$IMPLICIT_SCHEMA_VERSION (implicit)"

		if [ "" != "$EXPLICIT_SCHEMA_VERSION" ]; then
			SCHEMA_VERSION=$EXPLICIT_SCHEMA_VERSION
		fi

		echo ${BUNDLE_NAME},${SCHEMA_VERSION} >> $OUTPUT_FILE
	done
}

if [ -z "${PORTAL_SOURCE_ROOT}" ]; then
	echo "Please set a PORTAL_SOURCE_ROOT for the build"
	exit 1
fi

checkpython pandas

if [[ 0 -ne $? ]]; then
	exit 1
fi

pushd "$PORTAL_SOURCE_ROOT" > /dev/null

OUTPUT_FOLDER=$(dirname $PWD)/metadata

mkdir -p $OUTPUT_FOLDER

git ls-remote -t git@github.com:liferay/liferay-portal.git | \
	awk '{ print $2 }' | grep ga | grep -vF sync | grep -vF 'private' | grep -F '/7.0' | \
	sort | cut -d'/' -f 3 > $OUTPUT_FOLDER/tags.txt

git ls-remote -t git@github.com:liferay/liferay-portal-ee.git | \
	awk '{ print $2 }' | grep 'fix-pack-\(base-70\|de-\)' | grep -v '\(test\|demo\)' | \
	sort -t'-' -nk4,5 | cut -d'/' -f 3 >> $OUTPUT_FOLDER/tags.txt

for tag_id in $(cat $OUTPUT_FOLDER/tags.txt); do
	packageinfo $tag_id
	requireschema $tag_id
done

popd > /dev/null