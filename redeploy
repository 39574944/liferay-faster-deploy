#!/bin/bash

applychanges() {
	# Run cachenpm if needed

	$(dirname "${BASH_SOURCE[0]}")/skipmp
	$(dirname "${BASH_SOURCE[0]}")/nodejs/cachenpm $NEW_BASELINE

	# Compute all changes, not just the ones in modules (which is what cachenpm does)

	if [ "" == "$BASE_TAG" ]; then
		$(dirname "${BASH_SOURCE[0]}")/gitchanges $NEW_BASELINE $BASE_BRANCH
	else
		$(dirname "${BASH_SOURCE[0]}")/gitchanges $NEW_BASELINE $BASE_TAG
	fi

	# If any of the folders that are affected is one that has
	# one of the version range macros, make sure to fix it

	for folder in $(git ls-files modules | grep build.gradle | xargs grep -l 'version: "\[' | dirnames); do
		if [ "" != "$(grep -F "$folder" .redeploy/changes_gradle_2.txt)" ]; then
			$(dirname "${BASH_SOURCE[0]}")/fixbnd $folder
		fi
	done

	echo ""
	echo "Deploying folders:"
	cat .redeploy/changes_ant.txt | awk '{ print " * " $1 }'

	echo ""
	echo "Deploying modules:"
	cat .redeploy/changes_gradle_1.txt .redeploy/changes_gradle_2.txt | awk '{ print " * " $1 }'
	echo ""

	# First, deploy portal libraries and global libraries

	for file in $(grep '^lib/global/' .redeploy/changes.txt); do
		cp $file $LIFERAY_HOME/$TOMCAT_FOLDER/lib/ext
	done

	for file in $(grep '^lib/portal/' .redeploy/changes.txt); do
		cp $file $LIFERAY_HOME/$TOMCAT_FOLDER/webapps/ROOT/WEB-INF/lib
	done

	# Check to see if there are any modules we need to deploy early

	if [[ 0 -ne $(cat .redeploy/changes_gradle_1.txt | wc -l) ]]; then
		deployportalpre

		if [[ 0 -ne $? ]]; then
			return 1
		fi
	fi

	# Next, check to see if there is anything we need to deploy with ant

	if [[ 0 -ne $(cat .redeploy/changes_ant.txt | wc -l) ]]; then
		deployant

		if [[ 0 -ne $? ]]; then
			return 1
		fi
	fi

	# Finally, check to see if there is anything we need to deploy with gradle

	if [[ 0 -ne $(cat .redeploy/changes_gradle_2.txt | wc -l) ]]; then
		deploymodules

		if [[ 0 -ne $? ]]; then
			return 1
		fi
	fi

	if [ -f .redeploy/changes_ant.txt ] && [ "" != "$(grep util .redeploy/changes_ant.txt)" ] && [ "ee-7.0.x" == "$BASE_BRANCH" ]; then
		echo "Modified util-*.jar, must clear the osgi/state folder for WABs to be rebuilt"
	fi

	# Undo changes to build-common.xml and modules/build.gradle

	if [ -d modules ]; then
		git checkout build-common.xml
		git checkout modules/build.gradle
	fi
}

cdroot() {
	if [ ! -f "$GIT_ROOT/release.properties" ]; then
		echo "Unable to find release.properties at version control root"
		return 1
	fi

	builtin cd $GIT_ROOT
}

checksnapshots() {
	. $(dirname "${BASH_SOURCE[0]}")/checksnapshots
}

deployant() {
	# Make sure that we have registry-api and anything else that is
	# part of the portal-pre profile

	if [ ! -d tmp/lib-pre ]; then
		deployportalpre
	fi

	if [ "" != "$(grep setup-libs build.xml)" ]; then
		if [[ $(ls -1 "$GIT_ROOT/lib/portal" | wc -l) -lt $(cat "$GIT_ROOT/lib/portal/dependencies.properties" | wc -l) ]]; then
			ant setup-libs
		fi
	fi

	# Some of the builds (notably util-taglib) need the rest of the
	# portal to have been built, so we can copy that from our bundle

	echo "Unzipping compiled root level folders from bundle..."

	for folder in $(ls -1); do
		if [ -f $folder/build.xml ]; then
			unzipportaljar $folder
		fi
	done

	checksnapshots

	# Finally, iterate over the folders that are listed for deployment

	for folder in $(cat .redeploy/changes_ant.txt); do
		echo -e "\nBuilding $folder"

		pushd $folder > /dev/null

		if [ -f bnd.bnd ] && [ "" != "$(grep -F 'Bundle-Name' bnd.bnd)" ]; then
			ant deploy install-portal-snapshot
		else
			ant deploy
		fi

		EXIT_STATUS=$?

		popd > /dev/null

		if [[ 0 -ne $EXIT_STATUS ]]; then
			return $EXIT_STATUS
		fi
	done
}

deploymodules() {
	cat /dev/null > .redeploy/changes_gradle_3.txt

	for folder in $(cat .redeploy/changes_gradle_2.txt); do
		if [ -f $folder/.lfrbuild-portal ]; then
			echo $folder >> .redeploy/changes_gradle_3.txt
			unziposgijar $folder
		fi
	done

	cd modules
	cat ../.redeploy/changes_gradle_3.txt | cut -d'/' -f 2- | tr '/' ':' | awk '{ print ":" $1 ":deploy" }' | xargs $(dirname "${BASH_SOURCE[0]}")/gw
	cd ..
}

deployportalpre() {
	if [ ! -d modules ]; then
		return 0
	fi

	cd modules
	gw -Dbuild.profile=portal-pre -Pforced.deploy.dir=${PWD}/../tmp/lib-pre deploy
	cd ..
}

downloadbuild() {
	. $(dirname "${BASH_SOURCE[0]}")/downloadbuild $1
}

dirnames() {
	python $(dirname "${BASH_SOURCE[0]}")/dirnames.py
}

gw() {
	$(dirname "${BASH_SOURCE[0]}")/gw $@
}

redeploy() {
	downloadbuild $1 && applychanges
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/setopts
}

unziposgijar() {
	LIFERAY_HOME=$LIFERAY_HOME \
		TOMCAT_FOLDER=$TOMCAT_FOLDER \
			$(dirname "${BASH_SOURCE[0]}")/unziposgijar $@
}

unzipportaljar() {
	LIFERAY_HOME=$LIFERAY_HOME \
		TOMCAT_FOLDER=$TOMCAT_FOLDER \
			$(dirname "${BASH_SOURCE[0]}")/unzipportaljar $@
}

CURRENT_HASH=$(git log -1 --pretty='%H')

setopts && cdroot

if [[ 0 -ne $? ]]; then
	exit $?
fi

. $(dirname "${BASH_SOURCE[0]}")/appserverprops

if [[ 0 -ne $? ]]; then
	exit $?
fi

mkdir -p "$HOME/.liferay/builds"

time redeploy $1