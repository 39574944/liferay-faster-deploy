#!/bin/bash

if [ -z ${BUILD_FOLDER_PREFIX+x} ]; then
	BUILD_FOLDER_PREFIX=/opt/liferay
fi

if [ -z ${BUILD_FOLDER_SUFFIX+x} ]; then
	BUILD_FOLDER_SUFFIX=bundles
fi

if [ -z ${TAG_ARCHIVE_MIRROR+x} ]; then
	TAG_ARCHIVE_MIRROR=http://mirrors/files.liferay.com/private/ee/fix-packs/support/tags
fi

if [ -z ${BRANCH_ARCHIVE_MIRROR+x} ]; then
	BRANCH_ARCHIVE_MIRROR=http://cloud-10-50-0-165/builds
fi

applychanges() {
	git ls-files | grep '/\(build.xml\|build.gradle\)$' > root_candidates.txt

	COMPARE_HASH=$NEW_BASELINE

	if [ -f last_deploy.txt ]; then
		LAST_DEPLOY_HASH=$(cat last_deploy.txt)

		if [ "" != "$LAST_DEPLOY_HASH" ]; then
			IS_ANCESTOR=$(git merge-base --is-ancestor $LAST_DEPLOY_HASH $CURRENT_HASH)

			if [[ 0 -eq $? ]]; then
				COMPARE_HASH=$LAST_DEPLOY_HASH
			fi
		fi
	fi

	git diff ${COMPARE_HASH}..HEAD --name-only > deploy_changes.txt
	git status -s | grep -vF '/rebel.xml' | grep -vF '.iml' | awk '{print $2}' >> deploy_changes.txt

	# Identify the folders that need to change

	python $(dirname $0)/redeploy.py > deploy_modules.txt

	# Check if we need to rerun cachenpm

	if isneedscachenpm; then
		$(dirname $0)/cachenpm
	fi

	# In the future, the script will handle reordering of folders, so just
	# iterate over the result without any fancy logic here.

	for folder in $(cat deploy_modules.txt); do
		echo -e "\nBuilding $folder"

		pushd $folder > /dev/null

		if [[ "$folder" == modules/* ]]; then
			gw deploy
		else
			ant jar install-portal-snapshots
		fi

		EXIT_STATUS=$?

		popd > /dev/null

		if [[ 0 -ne $EXIT_STATUS ]]; then
			return $EXIT_STATUS
		fi
	done

	echo -n $CURRENT_HASH > last_deploy.txt
}

cdroot() {
	GIT_ROOT=$PWD

	while [ ! -e "$GIT_ROOT/.git" ] && [ "/" != "$GIT_ROOT" ]; do
		GIT_ROOT=$(dirname $GIT_ROOT)
	done

	if [ ! -e "$GIT_ROOT/.git" ]; then
		echo "Unable to find version control root"
		return 1
	fi

	if [ ! -f "$GIT_ROOT/release.properties" ]; then
		echo "Unable to find release.properties at version control root"
		return 1
	fi

	builtin cd $GIT_ROOT
}

downloadbranch() {
	# Make sure there is a build on the archive mirror for our branch

	SHORT_NAME=$(echo $BASE_BRANCH | sed 's/ee-//g' | sed 's/\.//g')
	BUILD_NAME=$(curl -s $BRANCH_ARCHIVE_MIRROR/ | grep -o '<a href="'${SHORT_NAME}'-[^"]*.tar.gz">' | cut -d'"' -f 2 | sort | tail -1)

	if [ "" == "$BUILD_NAME" ]; then
		echo "Could not find build for $SHORT_NAME"
		return 1
	fi

	# Acquire the hash and make sure we have it

	BUILD_LOG=$(echo $BUILD_NAME | cut -d'.' -f 1).log
	UPDATE_TIME=$(echo $BUILD_NAME | cut -d'.' -f 1 | cut -d'-' -f 2)

	NEW_BASELINE=$(curl -r 0-49 -s ${BRANCH_ARCHIVE_MIRROR}/${BUILD_LOG} | tail -1)

	if [ "" == "$(git log -1 $NEW_BASELINE)" ]; then
		echo "Checking remotes for updates"

		for remote in $(git remote); do
			git fetch $remote --no-tags
		done
	fi

	# Rebase against the acquired hash if necessary

	if [ "" == "$BASE_TAG" ] && [ "$TARGET_BRANCH" != "$BASE_BRANCH" ]; then
		BASE_HASH=$(git log -1 --pretty='%H' $BASE_BRANCH)

		if [ "$BASE_HASH" != "$NEW_BASELINE" ]; then
			NEEDS_STASH=$(git status -s)

			if [ "" != "$NEEDS_STASH" ]; then
				git stash
			fi

			git checkout -f $BASE_BRANCH
			git rebase $NEW_BASELINE
			git reset --hard $NEW_BASELINE

			git checkout $TARGET_BRANCH

			if [ "" != "$NEEDS_STASH" ]; then
				git stash pop
			fi
		fi
	fi

	IS_ANCESTOR=$(git merge-base --is-ancestor $NEW_BASELINE $CURRENT_HASH)

	if [[ 0 -ne $? ]]; then
		echo "Rebasing against $SHORT_NAME ($NEW_BASELINE)"

		git rebase $NEW_BASELINE
	else
		echo "$TARGET_BRANCH is already rebased against $SHORT_NAME ($NEW_BASELINE)"
	fi

	# Download the build if we haven't done so already, making
	# sure to clean up past builds to not take up too much space

	if [ ! -f "$HOME/.liferay/builds/$BUILD_NAME" ]; then
		find "$HOME/.liferay/builds/" -name "${SHORT_NAME}*.tar.gz" | xargs rm

		echo "Downloading snapshot for $SHORT_NAME ($NEW_BASELINE)"

		builtin cd "$HOME/.liferay/builds/"
		wget "${BRANCH_ARCHIVE_MIRROR}/${BUILD_NAME}"
		builtin cd -
	fi

	extract
}

downloadtag() {
	NEW_BASELINE=$BASE_TAG
	BUILD_NAME=${BASE_TAG}.tar.gz

	if [ ! -f "$HOME/.liferay/builds/$BUILD_NAME" ]; then
		echo "Downloading snapshot for $BASE_TAG"

		builtin cd "$HOME/.liferay/builds/"
		wget "${TAG_ARCHIVE_MIRROR}/${BUILD_NAME}"
		builtin cd -
	fi

	if [ ! -f "$HOME/.liferay/builds/$BUILD_NAME" ]; then
		echo "No build release archive available for $BASE_TAG"
		return 1
	fi

	extract
}

extract() {
	# Figure out if we need to untar the build, based on whether the
	# baseline hash has changed

	mkdir -p "$TARGET_FOLDER"

	OLD_BASELINE=

	if [ -f "$TARGET_FOLDER/baseline.txt" ]; then
		OLD_BASELINE=$(cat $TARGET_FOLDER/baseline.txt)
	fi

	# Cleanup the folders before we untar. Only file we exclude is
	# the Hypersonic data files if we already have them.

	if [ "$OLD_BASELINE" == "$NEW_BASELINE" ]; then
		echo "$TARGET_FOLDER is already up to date"
		return 0
	fi

	builtin cd "$TARGET_FOLDER"

	rm -rf tomcat* osgi tools work

	EXCLUDES=

	if [ -d data ]; then
		EXCLUDES=--exclude='data/hypersonic/lportal.script' --exclude='data/hypersonic/lportal.properties'
	fi

	tar -zxf "$HOME/.liferay/builds/${BUILD_NAME}" $EXCLUDES

	echo -n "$NEW_BASELINE" > "baseline.txt"

	builtin cd -
}

getparent() {
	# Identify the folder we build into

	TARGET_BRANCH=$(git symbolic-ref --short HEAD)

	if [ "" == "$TARGET_BRANCH" ]; then
		echo "Unable to build from detached head"
		return 1
	fi

	if [ "" != "$BUILD_FOLDER_SUFFIX" ]; then
		TARGET_FOLDER=${BUILD_FOLDER_PREFIX}/${TARGET_BRANCH}/${BUILD_FOLDER_SUFFIX}
	else
		TARGET_FOLDER=${BUILD_FOLDER_PREFIX}/${TARGET_BRANCH}
	fi

	# Update app.server.$USER.properties

	touch app.server.$USER.properties

	if [ "" == "$(grep "app.server.parent.dir=${TARGET_FOLDER}" app.server.$USER.properties)" ]; then
		echo -e "\n#app.server.parent.dir=${TARGET_FOLDER}" >> app.server.$USER.properties
	fi

	sed -i 's/^app.server.parent.dir=/#app.server.parent.dir=/g' app.server.$USER.properties
	sed -i "s@#\(app.server.parent.dir=${TARGET_FOLDER}\)@\1@g" app.server.$USER.properties

	# Identify the base branch so we know what to fetch

	BASE_TAG=
	BASE_BRANCH=

	if isnotbuildbranch $TARGET_BRANCH; then
		BASE_TAG=$(git describe HEAD --abbrev=0 2> /dev/null)

		if [ "" == "$BASE_TAG" ]; then
			FULL_VERSION=$(grep lp.version= release.properties | cut -d'=' -f 2)
			MAJOR_VERSION=$(grep lp.version.major= release.properties | cut -d'=' -f 2)

			if [ "6.1" == "$MAJOR_VERSION" ]; then
				BASE_BRANCH=ee-6.1.x
			elif [ "6.2" == "$MAJOR_VERSION" ]; then
				BASE_BRANCH=ee-6.2.x
			elif [ "7.0" == "$MAJOR_VERSION" ] && [ "7.0.10" == "$FULL_VERSION" ]; then
				BASE_BRANCH=ee-7.0.x
			elif [ "7.0" == "$MAJOR_VERSION" ]; then
				BASE_BRANCH=master
			fi
		fi
	fi

	# If we're using a tag, shortcut

	if [ "" != "$BASE_TAG" ]; then
		downloadtag
		return $?
	fi

	# If we have a known branch, we'll use it

	if isnotbuildbranch $BASE_BRANCH; then
		echo "Unable to identify base branch, please rebase"
		return 1
	fi

	downloadbranch
	return $?
}

gw() {
	$(dirname $0)/gw $@
}

isneedscachenpm() {
	for folder in $(cat deploy_modules.txt); do
		if [ -f "$folder/package.json" ]; then
			return 0
		fi
	done

	return 1
}

isnotbuildbranch() {
	if [ "master" == "$1" ]; then
		return 1
	elif [ "ee-7.0.x" == "$1" ]; then
		return 1
	elif [ "ee-6.2.x" == "$1" ]; then
		return 1
	elif [ "ee-6.1.x" == "$1" ]; then
		return 1
	elif [ "" == "$1" ]; then
		return 1
	else
		return 0
	fi
}

redeploy() {
	setopts && getparent && applychanges
}

setopts() {
	JAVA_VERSION=$(java -version 2>&1 | head -1 | cut -d'"' -f 2 | cut -d'.' -f 2)

	if [[ 8 -ne $JAVA_VERSION ]]; then
		echo "Please switch to JDK 8 before building"
		return 1
	fi

	if [ "" == "$ANT_OPTS" ]; then
		export ANT_OPTS='-Xms1g -Xmx1g'
		sed -i 's/\${env.ANT_OPTS}/${env.GRADLE_OPTS}/g' build-common.xml
		git update-index --assume-unchanged build-common.xml
	fi

	if [ "" == "$GRADLE_OPTS" ]; then
		export GRADLE_OPTS='-Xms3g -Xmx3g -Dorg.gradle.workers.max=1'
	fi
}

cdroot

if [[ 0 -ne $? ]]; then
	exit $?
fi

CURRENT_HASH=$(git log -1 --pretty='%H')

mkdir -p "$HOME/.liferay/builds"

time redeploy
