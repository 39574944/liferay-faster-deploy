#!/bin/bash

applychanges() {
	# Set the modules that we are willing to deploy

	$(dirname "${BASH_SOURCE[0]}")/skipmp

	# Compute all changes

	if [ "" == "$BASE_TAG" ]; then
		$(dirname "${BASH_SOURCE[0]}")/gitchanges $NEW_BASELINE $BASE_BRANCH
	else
		$(dirname "${BASH_SOURCE[0]}")/gitchanges $NEW_BASELINE $BASE_TAG
	fi

	# If any of the folders that are affected is one that has
	# one of the version range macros, make sure to fix it

	for folder in $(git ls-files modules | grep build.gradle | xargs grep -l 'version: "\[' | dirnames); do
		if [ "" != "$(grep -F "$folder" ${GIT_ROOT}/.redeploy/changes_gradle_2.txt)" ]; then
			$(dirname "${BASH_SOURCE[0]}")/fixbnd $folder
		fi
	done

	echo ""
	echo "Deploying folders:"
	cat ${GIT_ROOT}/.redeploy/changes_ant.txt | awk '{ print " * " $1 }'

	echo ""
	echo "Deploying modules:"
	cat ${GIT_ROOT}/.redeploy/changes_gradle_1.txt ${GIT_ROOT}/.redeploy/changes_gradle_2.txt | awk '{ print " * " $1 }'
	echo ""

	# First, deploy portal libraries and global libraries

	if [ "" != "$(grep '^lib/' ${GIT_ROOT}/.redeploy/changes.txt)" ]; then
		echo "Deploying updated libraries"

		if [ "" != "$(grep -F deploy-additional-jars ${GIT_ROOT}/build.xml)" ]; then
			cd ${GIT_ROOT}
			ant deploy-additional-jars
			cd -
		else
			for file in $(grep '^lib/global/' ${GIT_ROOT}/.redeploy/changes.txt); do
				cp $file $LIFERAY_HOME/$TOMCAT_FOLDER/lib/ext
			done

			for file in $(grep '^lib/portal/' ${GIT_ROOT}/.redeploy/changes.txt); do
				cp $file $LIFERAY_HOME/$TOMCAT_FOLDER/webapps/ROOT/WEB-INF/lib
			done
		fi
	fi

	# Check to see if there is anything we need to deploy with ant

	if [[ 0 -ne $(cat ${GIT_ROOT}/.redeploy/changes_gradle_1.txt | grep -c '^') ]] || [[ 0 -ne $(cat ${GIT_ROOT}/.redeploy/changes_ant.txt | grep -c '^') ]]; then
		deployant

		if [[ 0 -ne $? ]]; then
			return 1
		fi

		if [ "" != "$(grep -F packageinfo ${GIT_ROOT}/.redeploy/changes.txt | grep -vF modules)" ]; then
			cd modules/core/portal-bootstrap
			gw deploy
			cd -
		fi
	fi

	# Finally, check to see if there is anything we need to deploy with gradle

	if [[ 0 -ne $(cat ${GIT_ROOT}/.redeploy/changes_gradle_2.txt | grep -c '^') ]]; then
		$(dirname "${BASH_SOURCE[0]}")/nodejs/cachenpm $NEW_BASELINE
		deploymodules

		if [[ 0 -ne $? ]]; then
			return 1
		fi
	fi

	if [ -f ${GIT_ROOT}/.redeploy/changes_ant.txt ] && [ "" != "$(grep util ${GIT_ROOT}/.redeploy/changes_ant.txt)" ]; then
		if [ "ee-6.1.x" != "$BASE_BRANCH" ] && [ "ee-6.2.x" != "$BASE_BRANCH" ]; then
			echo "Modified util-*.jar, must clear the osgi/state folder for WABs to be rebuilt"
		fi
	fi

	# Undo changes to build-common.xml and modules/build.gradle

	for file in build-common.xml modules/build.gradle; do
		if [ ! -h $file ] && [ "" != "$(git ls-files $file)" ]; then
			git checkout $file
		fi
	done
}

cdroot() {
	if [ -f "$GIT_ROOT/release.properties" ] || [ -f "${GIT_ROOT}/build-working-dir.xml" ]; then
		builtin cd $GIT_ROOT
	else
		echo "Unable to find release.properties at version control root"
		return 1
	fi
}

checksnapshots() {
	. $(dirname "${BASH_SOURCE[0]}")/checksnapshots
}

deployant() {
	# Some of the builds (notably util-taglib) need the rest of the
	# portal to have been built, so we can copy that from our bundle

	echo "Unzipping compiled root level folders from bundle..."

	for folder in $(ls -1); do
		if [ -f $folder/build.xml ]; then
			unzipportaljar $folder
		fi
	done

	# Make sure that we have registry-api and anything else that is
	# part of the portal-pre profile

	echo "Preparing initial portal snapshots..."

	ant compile
	checksnapshots

	# Finally, iterate over the folders that are listed for deployment

	for folder in $(cat ${GIT_ROOT}/.redeploy/changes_ant.txt); do
		if [ "" == "$(grep -F deploy $folder/build.xml)" ]; then
			continue
		fi

		echo -e "\nBuilding $folder"

		pushd $folder > /dev/null

		if [ -f bnd.bnd ] && [ "" != "$(grep -F 'Bundle-Name' bnd.bnd)" ]; then
			ant deploy install-portal-snapshot
		elif [ "" != "$(grep -F deploy-fast build.xml)" ]; then
			ant deploy-fast
		else
			ant deploy
		fi

		EXIT_STATUS=$?

		popd > /dev/null

		if [[ 0 -ne $EXIT_STATUS ]]; then
			return $EXIT_STATUS
		fi
	done
}

deploymodules() {
	cat /dev/null > ${GIT_ROOT}/.redeploy/changes_gradle_3.txt

	for folder in $(cat ${GIT_ROOT}/.redeploy/changes_gradle_2.txt); do
		if [ -f $folder/.lfrbuild-portal ]; then
			echo $folder >> ${GIT_ROOT}/.redeploy/changes_gradle_3.txt
			unziposgijar $folder
		fi
	done

	cat /dev/null > ${GIT_ROOT}/.redeploy/deploy_gradle.txt

	cat ${GIT_ROOT}/.redeploy/changes_gradle_3.txt | cut -d'/' -f 2- | tr '/' ':' | awk '{ print ":" $1 ":deploy" }' > ${GIT_ROOT}/.redeploy/deploy_gradle.txt

	for module in $(cat ${GIT_ROOT}/.redeploy/changes_gradle_3.txt); do
		if [ "" != "$(git ls-files $module | grep -F .jsp)" ]; then
			echo "$module" | cut -d'/' -f 2- | tr '/' ':' | awk '{ print ":" $1 ":compileJSP" }' >> ${GIT_ROOT}/.redeploy/deploy_gradle.txt
		fi
	done

	cd modules
	cat ${GIT_ROOT}/.redeploy/deploy_gradle.txt | sort | xargs $(dirname "${BASH_SOURCE[0]}")/gw
	cd ..
}

dirnames() {
	python $(dirname "${BASH_SOURCE[0]}")/dirnames.py
}

downloadbuild() {
	. $(dirname "${BASH_SOURCE[0]}")/downloadbuild $1
}

gw() {
	$(dirname "${BASH_SOURCE[0]}")/gw $@
}

redeploy() {
	downloadbuild $1 && applychanges
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/setopts
}

unziposgijar() {
	. $(dirname "${BASH_SOURCE[0]}")/unziposgijar $@
}

unzipportaljar() {
	. $(dirname "${BASH_SOURCE[0]}")/unzipportaljar $@
}

setopts && cdroot

if [[ 0 -ne $? ]]; then
	exit $?
fi

if [ -f git-commit-portal-ee ]; then
	git clean -xdf -e '**/*.iml' -e '.gradle/gradle.properties' -e '.idea' -e '.m2' -e 'lib' -e "app.server.$USER.properties" -e "build.$USER.properties"
else
	git clean -df
fi

CURRENT_HASH=$(git log -1 --pretty='%H')

. $(dirname "${BASH_SOURCE[0]}")/appserverprops

if [[ 0 -ne $? ]]; then
	exit $?
fi

mkdir -p "$HOME/.liferay/builds"

time redeploy $1