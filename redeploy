#!/bin/bash

applychanges() {
	local COMPARE_HASH=

	if [ -f .redeploy/last_deploy.txt ]; then
		COMPARE_HASH=$(cat .redeploy/last_deploy.txt)

		if [ "" != "$COMPARE_HASH" ]; then
			git merge-base --is-ancestor $COMPARE_HASH $CURRENT_HASH

			if [[ 0 -ne $? ]]; then
				COMPARE_HASH=
			fi
		fi
	fi

	if [ "" == "$COMPARE_HASH" ]; then
		COMPARE_HASH=$NEW_BASELINE
	fi

	# Run cachenpm if needed

	$(dirname "${BASH_SOURCE[0]}")/cachenpm $COMPARE_HASH

	# Compute all changes, not just the ones in modules (which is what cachenpm does)

	$(dirname "${BASH_SOURCE[0]}")/gitchanges $COMPARE_HASH

	# If any of the folders that are affected is one that has
	# one of the version range macros, make sure to fix it

	for folder in $(git ls-files modules | grep build.gradle | xargs grep -l 'version: "\[' | dirnames); do
		if [ "" != "$(grep -F "$folder" .redeploy/changes_gradle_2.txt)" ]; then
			$(dirname "${BASH_SOURCE[0]}")/fixbnd $folder
		fi
	done

	echo ""
	echo "Deploying folders:"
	cat .redeploy/changes_ant.txt | awk '{ print " * " $1 }'

	echo ""
	echo "Deploying modules:"
	cat .redeploy/changes_gradle_1.txt .redeploy/changes_gradle_2.txt | awk '{ print " * " $1 }'
	echo ""

	# First, check to see if there are any modules we need to deploy early

	if [[ 0 -ne $(wc -l .redeploy/changes_gradle_1.txt | cut -d' ' -f 1) ]]; then
		deployportalpre

		if [[ 0 -ne $? ]]; then
			return 1
		fi
	fi

	# Next, check to see if there is anything we need to deploy with ant

	if [[ 0 -ne $(wc -l .redeploy/changes_ant.txt | cut -d' ' -f 1) ]]; then
		deployant

		if [[ 0 -ne $? ]]; then
			return 1
		fi
	fi

	# Finally, check to see if there is anything we need to deploy with gradle

	if [[ 0 -ne $(wc -l .redeploy/changes_gradle_2.txt | cut -d' ' -f 1) ]]; then
		deploymodules

		if [[ 0 -ne $? ]]; then
			return 1
		fi
	fi

	echo -n $CURRENT_HASH > .redeploy/last_deploy.txt

	if [ -f .redeploy/changes_ant.txt ] && [ "" != "$(grep util .redeploy/changes_ant.txt)" ]; then
		echo "Modified util-*.jar, must clear the osgi/state folder for WABs to be rebuilt"
	fi

	# Undo changes to build-common.xml and modules/build.gradle

	git checkout build-common.xml
	git checkout modules/build.gradle
}

cdroot() {
	if [ ! -f "$GIT_ROOT/release.properties" ]; then
		echo "Unable to find release.properties at version control root"
		return 1
	fi

	builtin cd $GIT_ROOT
}

deployant() {
	# Make sure that we have registry-api and anything else that is
	# part of the portal-pre profile

	if [ ! -d tmp/lib-pre ]; then
		deployportalpre
	fi

	if [ "" != "$(grep setup-libs build.xml)" ] && [ ! -f .redeploy/setup_libs.txt ]; then
		ant setup-libs
		touch .redeploy/setup_libs.txt
	fi

	# Some of the builds (notably util-taglib) need the rest of the
	# portal to have been built, so we can copy that from our bundle

	for folder in $(ls -1); do
		if [ -d $folder/src ] && [ ! -f $folder/$folder.jar ]; then
			if [ -f $LIFERAY_HOME/tomcat-*/webapps/ROOT/WEB-INF/lib/$folder.jar ]; then
				cp $LIFERAY_HOME/tomcat-*/webapps/ROOT/WEB-INF/lib/$folder.jar $folder
			elif [ -f $LIFERAY_HOME/tomcat-*/lib/ext/$folder.jar ]; then
				cp $LIFERAY_HOME/tomcat-*/lib/ext/$folder.jar $folder
			fi

			if [ -f $folder/$folder.jar ]; then
				mkdir -p $folder/classes
				unzip -qq $folder/$folder.jar -d $folder/classes
			fi
		fi
	done

	# Finally, iterate over the folders that are listed for deployment

	for folder in $(cat .redeploy/changes_ant.txt); do
		echo -e "\nBuilding $folder"

		pushd $folder > /dev/null

		if [ -f bnd.bnd ]; then
			ant deploy install-portal-snapshot
		else
			ant deploy
		fi

		EXIT_STATUS=$?

		popd > /dev/null

		if [[ 0 -ne $EXIT_STATUS ]]; then
			return $EXIT_STATUS
		fi
	done
}

deploymodules() {
	cd modules
	cat ../.redeploy/changes_gradle_2.txt | cut -d'/' -f 2- | tr '/' ':' | awk '{ print ":" $1 ":deploy" }' | xargs $(dirname "${BASH_SOURCE[0]}")/gw
	cd ..
}

deployportalpre() {
	cd modules
	gw -Dbuild.profile=portal-pre -Pforced.deploy.dir=${PWD}/../tmp/lib-pre deploy
	cd ..
}

downloadbuild() {
	. $(dirname "${BASH_SOURCE[0]}")/downloadbuild $1
}

dirnames() {
	python $(dirname "${BASH_SOURCE[0]}")/dirnames.py
}

gitchanges() {
	. $(dirname "${BASH_SOURCE[0]}")/gitchanges $@
}

gw() {
	$(dirname "${BASH_SOURCE[0]}")/gw $@
}

redeploy() {
	downloadbuild $1 && applychanges
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/setopts
}

if [ -z "${TAG_ARCHIVE_MIRROR}" ]; then
	echo "Please set a TAG_ARCHIVE_MIRROR for the build"
	exit 1
fi

if [ -z "${BRANCH_ARCHIVE_MIRROR}" ]; then
	echo "Please set a BRANCH_ARCHIVE_MIRROR for the build"
	exit 1
fi

CURRENT_HASH=$(git log -1 --pretty='%H')

setopts && cdroot

if [[ 0 -ne $? ]]; then
	exit $?
fi

mkdir -p "$HOME/.liferay/builds"

time redeploy $1