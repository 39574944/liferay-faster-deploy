#!/bin/bash

baseline() {
	local CHANGE_ID=$1

	if [ "" == "$CHANGE_ID" ]; then
		# Identify the base branch

		. $(dirname "${BASH_SOURCE[0]}")/../getparent

		if [ "" == "$BASE_BRANCH" ]; then
			echo Unable to identify base branch
			return 1
		fi

		# Find the closest ancestor based on which one has the fewest commits

		local origin_remote=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/origin[^/]*/${BASE_BRANCH}$" | cut -d'/' -f 3)
		local upstream_remote=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/upstream[^/]*/${BASE_BRANCH}$" | cut -d'/' -f 3)
		local base_remote=

		if [[ $(git log --pretty='%H' ${origin_remote}/${BASE_BRANCH}..HEAD | grep -c '^') -gt $(git log --pretty='%H' ${upstream_remote}/${BASE_BRANCH}..HEAD | grep -c '^') ]]; then
			base_remote=$upstream_remote
		else
			base_remote=$origin_remote
		fi

		CHANGE_ID=${base_remote}/${BASE_BRANCH}
	fi

	# Compute the changes

	$(dirname "${BASH_SOURCE[0]}")/../gitchanges $CHANGE_ID

	if [[ 0 -eq $(cat .redeploy/changes.txt | grep -c '^') ]]; then
		echo No changes detected.
		return 0
	fi

	# Scan the Gradle changes to build one large command

	cat /dev/null > $GIT_ROOT/.redeploy/baseline.txt

	for folder in $(cat "$GIT_ROOT/.redeploy/changes_gradle_1.txt" "$GIT_ROOT/.redeploy/changes_gradle_2.txt"); do
		if [ "" != "$(grep -F "$folder" $GIT_ROOT/.redeploy/changes.txt | grep -F '.java')" ]; then
			if [ -d modules ]; then
				echo $folder | cut -d'/' -f 2- | tr '/' ':' | awk '{ print ":" $1 ":baseline" }' >> $GIT_ROOT/.redeploy/baseline.txt
			else
				local project_prefix=$(grep -F 'project.path.prefix=' gradle.properties | cut -d'=' -f 2)
				echo $folder | cut -d'/' -f 2- | tr '/' ':' | awk '{ print "'${project_prefix}':" $1 ":baseline" }' >> $GIT_ROOT/.redeploy/baseline.txt
			fi
		fi
	done

	if [[ 0 -ne $(cat $GIT_ROOT/.redeploy/baseline.txt | grep -c '^') ]]; then
		checksnapshots

		# Execute the one large command we built before

		if [ -d modules ]; then
			cd modules

			cat $GIT_ROOT/.redeploy/baseline.txt | xargs $(dirname "${BASH_SOURCE[0]}")/../gw --continue
			EXIT_CODE=$?

			cd -
		else
			cat $GIT_ROOT/.redeploy/baseline.txt | xargs $(dirname "${BASH_SOURCE[0]}")/../gw --continue
			EXIT_CODE=$?
		fi

		if [[ 0 -ne $EXIT_CODE ]]; then
			return $EXIT_CODE
		fi
	fi

	if [[ 0 -ne $(grep -v modules "$GIT_ROOT/.redeploy/changes_ant.txt" | grep -F '.java' | grep -c '^') ]]; then
		for folder in $(cat "$GIT_ROOT/.redeploy/changes_ant.txt"); do
			if [ "" == "$(grep -F "$folder" $GIT_ROOT/.redeploy/changes.txt | grep -F '.java')" ]; then
				continue
			fi

			cd $folder
			pwd

			ant -Dbaseline.jar.report.level=persist jar
			EXIT_CODE=$?
			cd -

			if [[ 0 -ne $EXIT_CODE ]]; then
				return $EXIT_CODE
			fi
		done
	fi
}

checksnapshots() {
	. $(dirname "${BASH_SOURCE[0]}")/../checksnapshots
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/../setopts
}

setopts

if [[ 0 -ne $? ]]; then
	exit 1
fi

baseline $@