#!/bin/bash

baseline() {
	$(dirname "${BASH_SOURCE[0]}")/baseline
}

checkrepomode() {
	local SUBREPO_CHANGES=

	cat .redeploy/changes_ant.txt .redeploy/changes_gradle_1.txt .redeploy/changes_gradle_2.txt > .redeploy/central.txt

	for subrepo_folder in $(git ls-files modules | grep -F '.gitrepo' | xargs grep -Fl 'mode = pull' | dirnames); do
		if [ "" != "$(grep -F $subrepo_folder .redeploy/changes_gradle_2.txt)" ]; then
			# Make sure to exclude it from the known changes in central

			grep -vF $subrepo_folder .redeploy/central.txt > .redeploy/central.txt.tmp
			rm .redeploy/central.txt
			mv .redeploy/central.txt.tmp .redeploy/central.txt

			# Generate patch files and remember what we generated

			local remote_location=$(grep -F 'remote = ' $subrepo_folder/.gitrepo | cut -d'=' -f 2)
			local remote_project=$(echo "$remote_location" | cut -d'/' -f 2 | cut -d'.' -f 1)

			SUBREPO_CHANGES="${SUBREPO_CHANGES}*${remote_location}\n"

			for patch_file in $(git format-patch ${upstream_remote}/$BASE_BRANCH -- "$subrepo_folder/"); do
				sed -i.bak "s@${subrepo_folder}/@@g" $patch_file
				mv $patch_file $SUBREPO_ROOT/${remote_project}/
				rm -f ${patch_file}.bak

				SUBREPO_CHANGES="${SUBREPO_CHANGES} $SUBREPO_ROOT/${remote_project}/${patch_file}\n"
			done
		fi
	done

	if [ "" == "$SUBREPO_CHANGES" ]; then
		return 0
	fi

	echo -e "\nThis pull request must be split between repositories\n"

	echo "* $(git remote get-url $upstream_remote)"
	cat .redeploy/central.txt | awk '{ print "'"'"'" $1 "/'"'"'" }' | xargs git format-patch ${upstream_remote}/$BASE_BRANCH -- | awk '{ print "    ./" $1 }'

	echo -e "$SUBREPO_CHANGES"

	echo "Create and switch to a new branch in each repository and run:"
	echo ''
	echo '    ls -1 *.patch | sort | xargs git am'
	echo ''

	return 1
}

dirnames() {
	python $(dirname "${BASH_SOURCE[0]}")/../dirnames.py
}

findreviewer() {
	. $(dirname "${BASH_SOURCE[0]}")/findreviewer "$*"
}

fixdeps() {
	$(dirname "${BASH_SOURCE[0]}")/../packageinfo/fixdeps
}

formatsource() {
	$(dirname "${BASH_SOURCE[0]}")/formatsource
}

pmdreport() {
	$(dirname "${BASH_SOURCE[0]}")/pmdreport
}

sendpull() {
	if [ "" == "$1" ]; then
		echo Please specify a reviewer
		return 1
	fi

	local HAS_CHANGES=$(git status -s | grep -vF '??' | grep -vF gradle.properties)

	if [ "" != "$HAS_CHANGES" ]; then
		echo "Please commit local modifications before sending a pull request"
		return 1
	fi

	# Figure out where we are pushing our branch

	if [ -f "$GIT_ROOT/release.properties" ]; then
		. $(dirname "${BASH_SOURCE[0]}")/../getparent
	else
		CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
		BASE_BRANCH=master
	fi

	remote_name=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/origin[^/]*/${BASE_BRANCH}$" | cut -d'/' -f 3)

	if [ "" == "$remote_name" ]; then
		echo "Unable to identify origin for $BASE_BRANCH"
		return 1
	fi

	if [ "" == "$BASE_BRANCH" ]; then
		echo Unable to identify base branch
		return 1
	fi

	if [ "master" == "$CURRENT_BRANCH" ]; then
		echo Attempted to submit pull request from master
		return 1
	fi

	# Figure out who we are sending things for review

	findreviewer $@

	if [[ 0 -ne $? ]]; then
		return 1
	fi

	echo "Reviewer: ${reviewer}"

	# Rebase against the upstream variant of the branch

	upstream_remote=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/upstream[^/]*/${BASE_BRANCH}$" | cut -d'/' -f 3)

	if [ "" == "$upstream_remote" ]; then
		echo "Unable to identify upstream equivalent of $BASE_BRANCH"
		return 1
	fi

	git fetch --no-tags ${upstream_remote}

	HAS_CHANGES=$(git status -s | grep -vF '??')

	if [ "" != "$HAS_CHANGES" ]; then
		git stash
	fi

	git rebase ${upstream_remote}/${BASE_BRANCH}
	local EXIT_CODE=$?

	if [[ 0 -ne $EXIT_CODE ]]; then
		if [ "" != "$HAS_CHANGES" ]; then
			git rebase --abort
			git stash pop
		fi

		return 1
	elif [ "" != "$HAS_CHANGES" ]; then
		git stash pop
		EXIT_CODE=$?
	fi

	if [[ 0 -ne $EXIT_CODE ]]; then
		return 1
	fi

	if [ -f "$GIT_ROOT/release.properties" ]; then
		pushd $GIT_ROOT > /dev/null

		$(dirname ${BASH_SOURCE})/subrepos

		. $(dirname "${BASH_SOURCE[0]}")/../gitchanges ${upstream_remote}/$BASE_BRANCH

		if [[ 0 -eq $(cat .redeploy/changes.txt | wc -l) ]]; then
			echo No changes detected.
			return 0
		fi

		checkrepomode && fixdeps && baseline && formatsource && pmdreport

		EXIT_CODE=$?

		popd > /dev/null

		if [[ 0 -ne $EXIT_CODE ]]; then
			return 1
		fi

		HAS_CHANGES=$(git status -s | grep -vF '??' | grep -vF gradle.properties)

		if [ "" != "$HAS_CHANGES" ]; then
			echo "Detected files modified during sanity check, please commit them before sending a pull request"
			return 1
		fi
	else
		pushd $GIT_ROOT > /dev/null

		. $(dirname "${BASH_SOURCE[0]}")/../gitchanges ${upstream_remote}/$BASE_BRANCH

		if [[ 0 -eq $(cat .redeploy/changes.txt | wc -l) ]]; then
			echo No changes detected.
			return 0
		fi

		fixdeps && baseline && formatsource && pmdreport

		EXIT_CODE=$?

		popd > /dev/null

		if [[ 0 -ne $EXIT_CODE ]]; then
			return 1
		fi

		HAS_CHANGES=$(git status -s | grep -vF '??' | grep -vF gradle.properties)

		if [ "" != "$HAS_CHANGES" ]; then
			echo "Detected files modified during sanity check, please commit them before sending a pull request"
			return 1
		fi
	fi

	# Update our origin

	git push -f $remote_name $CURRENT_BRANCH

	if [[ 0 -ne $? ]]; then
		return 1
	fi

	# Open a web browser so we can submit the pull request

	current_user=$(git remote -v | grep origin | cut -d':' -f 2 | cut -d'/' -f 1 | sort -u)
	reviewer_repository=$(git remote get-url $upstream_remote | cut -d'/' -f 2 | sed 's/\.git$//g' | uniq)

	python -m webbrowser "https://github.com/${reviewer}/${reviewer_repository}/compare/${BASE_BRANCH}...${current_user}:${CURRENT_BRANCH}"
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/../setopts
}

setopts

if [ "" == "$SUBREPO_ROOT" ]; then
	echo 'Please specify the root folder for subrepositories'
	exit 1
fi

if [[ 0 -ne $? ]]; then
	exit 1
fi

sendpull $@