#!/bin/bash

findreviewer() {
	. $(dirname "${BASH_SOURCE[0]}")/findreviewer "$*"
}

gitchanges() {
	. $(dirname "${BASH_SOURCE[0]}")/../gitchanges $@
}

gw() {
	$(dirname "${BASH_SOURCE[0]}")/../gw $@
}

rebaseline() {
	if [ ! -d modules ]; then
		return 0
	fi

	ant setup-sdk compile

	for folder in $(cat "$GIT_ROOT/.redeploy/changes_gradle_1.txt" "$GIT_ROOT/.redeploy/changes_gradle_2.txt"); do
		if [ "" == "$(grep -F "$folder" $GIT_ROOT/.redeploy/changes.txt | grep -F '.java')" ]; then
			continue
		fi

		cd $folder
		pwd

		gw baseline
		EXIT_CODE=$?

		cd -

		if [[ 0 -ne $EXIT_CODE ]]; then
			return $EXIT_CODE
		fi
	done

	if [[ 0 -ne $(grep -v modules "$GIT_ROOT/.redeploy/changes_ant.txt" | grep -F '.java' | wc -l) ]]; then
		for folder in $(cat "$GIT_ROOT/.redeploy/changes_ant.txt"); do
			if [ "" == "$(grep -F "$folder" $GIT_ROOT/.redeploy/changes.txt | grep -F '.java')" ]; then
				continue
			fi

			cd $folder
			pwd

			ant -Dbaseline.jar.report.level=persist jar
			EXIT_CODE=$?
			cd -

			if [[ 0 -ne $EXIT_CODE ]]; then
				return $EXIT_CODE
			fi
		done
	fi
}

reformat() {
	for folder in $(cat "$GIT_ROOT/.redeploy/changes_gradle_1.txt" "$GIT_ROOT/.redeploy/changes_gradle_2.txt"); do
		cd $folder
		pwd

		$(dirname "${BASH_SOURCE[0]}")/formatsource ${upstream_remote}/$BASE_BRANCH
		EXIT_CODE=$?

		cd -

		if [[ 0 -ne $EXIT_CODE ]]; then
			return $EXIT_CODE
		fi
	done

	if [[ 0 -ne $(wc -l "$GIT_ROOT/.redeploy/changes_ant.txt" | cut -d' ' -f 1) ]]; then
		cd portal-impl
		pwd

		$(dirname "${BASH_SOURCE[0]}")/formatsource ${upstream_remote}/$BASE_BRANCH $(git log ${upstream_remote}/$BASE_BRANCH..HEAD | wc -l)
		EXIT_CODE=$?
		cd -

		if [[ 0 -ne $EXIT_CODE ]]; then
			return $EXIT_CODE
		fi
	fi
}

repmd() {
	CHANGES="$(grep -F '.java' .redeploy/changes.txt)"

	CHANGE_COUNT=0

	if [ "" != "$CHANGES" ]; then
		ant -Dpmd.output.type=text -Dpmd.java.includes="$(echo -n "$CHANGES" | tr '\n' ',')" run-pmd
		CHANGE_COUNT=$(wc -c pmd-reports/pmd-report.text | cut -d' ' -f 1)
	fi

	if [[ 0 -eq $CHANGE_COUNT ]]; then
		echo No violations detected.
		return 0
	fi

	cat pmd-reports/pmd-report.text
	return 1
}

sendpull() {
	GIT_ROOT=$PWD

	while [ ! -e "$GIT_ROOT/.git" ] && [ "/" != "$GIT_ROOT" ]; do
		GIT_ROOT=$(dirname $GIT_ROOT)
	done

	if [ ! -e "$GIT_ROOT/.git" ]; then
		echo "Unable to find version control root"
		return 1
	fi

	if [ "" == "$1" ]; then
		echo Please specify a reviewer
		return 1
	fi

	# Figure out where we are pushing our branch

	if [ -f "$GIT_ROOT/release.properties" ]; then
		. $(dirname "${BASH_SOURCE[0]}")/../getparent
	else
		CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
		BASE_BRANCH=master
	fi

	remote_name=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/origin[^/]*/${BASE_BRANCH}$" | cut -d'/' -f 3)

	if [ "" == "$remote_name" ]; then
		echo "Unable to identify origin for $BASE_BRANCH"
		return 1
	fi

	if [ "" == "$BASE_BRANCH" ]; then
		echo Unable to identify base branch
		return 1
	fi

	if [ "master" == "$CURRENT_BRANCH" ]; then
		echo Attempted to submit pull request from master
		return 1
	fi

	# Figure out who we are sending things for review

	findreviewer $@

	if [[ 0 -ne $? ]]; then
		return 1
	fi

	echo "Reviewer: ${reviewer}"

	# Rebase against the upstream variant of the branch

	upstream_remote=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/upstream[^/]*/${BASE_BRANCH}$" | cut -d'/' -f 3)

	if [ "" == "$upstream_remote" ]; then
		echo "Unable to identify upstream equivalent of $BASE_BRANCH"
		return 1
	fi

	git fetch --no-tags ${upstream_remote}
	git rebase ${upstream_remote}/${BASE_BRANCH}

	if [[ 0 -ne $? ]]; then
		return 1
	fi

	if [ -f "$GIT_ROOT/release.properties" ]; then
		pushd $GIT_ROOT > /dev/null

		gitchanges ${upstream_remote}/$BASE_BRANCH && rebaseline && reformat && repmd
		EXIT_CODE=$?

		popd > /dev/null

		if [[ 0 -ne $EXIT_CODE ]]; then
			return 1
		fi
	fi

	# Update our origin

	git push -f $remote_name $CURRENT_BRANCH

	if [[ 0 -ne $? ]]; then
		return 1
	fi

	# Open a web browser so we can submit the pull request

	current_user=$(git remote -v | grep origin | cut -d':' -f 2 | cut -d'/' -f 1 | sort -u)
	reviewer_repository=$(git remote get-url $upstream_remote | cut -d'/' -f 2 | sed 's/\.git$//g' | uniq)

	python -m webbrowser "https://github.com/${reviewer}/${reviewer_repository}/compare/${BASE_BRANCH}...${current_user}:${CURRENT_BRANCH}"
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/../setopts
}

setopts

if [[ 0 -ne $? ]]; then
	exit 1
fi

sendpull $@