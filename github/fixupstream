#!/bin/bash

deletebranches() {
	local remote_url=$(git remote -v | grep "^${1}\s" | awk '{ print $2 }' | uniq)
	local remote_branches=$(git for-each-ref --format='%(refname)' refs/remotes/$1)

	if [ "git@github.com:liferay/liferay-portal.git" == "$remote_url" ]; then
		echo "$remote_branches" | grep -v '/master$'
	elif [ "git@github.com:liferay/liferay-portal-ee.git" == "$remote_url" ]; then
		echo "$remote_branches" | grep -v '/master-private$' | grep -v '/ee-[0-9]*\.[0-9]*\.x$' | grep -v '/7.0.x$' | grep -v '/7.0.x-private$'
		echo "$remote_branches" | grep '/ee-7.0.x$'
	elif [ "git@github.com:liferay/liferay-plugins.git" == "$remote_url" ]; then
		echo "$remote_branches" | grep -v '/master$' | grep -v '/ee-[0-9]*\.[0-9]*\.x$'
	elif [ "git@github.com:liferay/liferay-plugins-ee.git" == "$remote_url" ]; then
		echo "$remote_branches" | grep -v '/ee-[0-9]*\.[0-9]*\.x$' | grep -v '/ee-[0-9]*\.[0-9]*\.[0-9]*$'
	else
		echo "$remote_branches" | grep -v '/master$'
	fi
}

pushorigin() {
	"$(dirname "${BASH_SOURCE[0]}")/pushorigin" "$1" "$2"
}

retainbranches() {
	local remote_url=$(git remote -v | grep "^${1}\s" | awk '{ print $2 }' | uniq)
	local remote_branches=$(git ls-remote -h $1 | awk '{ print $2 }')

	if [ "git@github.com:liferay/liferay-portal.git" == "$remote_url" ]; then
		echo "$remote_branches" | grep '/master$'
	elif [ "git@github.com:liferay/liferay-portal-ee.git" == "$remote_url" ]; then
		echo "$remote_branches" | grep '/master-private$'
		echo "$remote_branches" | grep '/ee-[0-9]*\.[0-9]*\.x$' | grep -v '/ee-7.0.x$'
		echo "$remote_branches" | grep '/7.0.x$'
		echo "$remote_branches" | grep '/7.0.x-private$'
	elif [ "git@github.com:liferay/liferay-plugins.git" == "$remote_url" ]; then
		echo "$remote_branches" | grep '/master$'
		echo "$remote_branches" | grep '/ee-[0-9]*\.[0-9]*\.x$'
	elif [ "git@github.com:liferay/liferay-plugins-ee.git" == "$remote_url" ]; then
		echo "$remote_branches" | grep '/ee-[0-9]*\.[0-9]*\.x$'
		echo "$remote_branches" | grep '/ee-[0-9]*\.[0-9]*\.[0-9]*$'
	else
		echo "$remote_branches" | grep '/master$'
	fi
}

for remote in $(git remote | grep upstream); do
	delete_branches=$(deletebranches $remote | tr '\n' ' ')

	if [ "" != "$delete_branches" ]; then
		git branch -d -r $delete_branches
	fi

	retain_branches=$(retainbranches "$remote" | cut -d'/' -f 3- | tr '\n' ' ')

	if [ "" != "$retain_branches" ]; then
		git remote set-branches $remote $retain_branches
		git fetch $remote --no-tags --prune

		for branch in $retain_branches; do
			pushorigin $branch $remote
		done
	fi
done