#!/bin/bash

TIMESTAMP=$(date +%Y%m%d)

branch() {
	if [ -f "/var/www/html/builds/branches/${1}-${TIMESTAMP}.tar.gz" ]; then
		return 0
	fi

	if [ ! -d "$BUILD_FOLDER_PREFIX/$1" ]; then
		return 0
	fi

	if [ "master" == "$1" ]; then
		BASE_BRANCH=$1
	else
		BASE_BRANCH=ee-$(echo $1 | sed 's/\([0-9]\)/\1./g')
	fi

	checkout $BASE_BRANCH

	if [ "$BASE_BRANCH" != "$(git branch | grep -F '*' | cut -d' ' -f 2)" ]; then
		return 1
	fi

	git rebase upstream/$BASE_BRANCH

	if [[ 0 -ne $? ]]; then
		git rebase --abort
		return 1
	fi

	BUILD_FOLDER_PREFIX="$BUILD_FOLDER_PREFIX" \
		BUILD_FOLDER_SUFFIX="$TIMESTAMP" \
		ARCHIVE_FOLDER="/var/www/html/builds/branches" \
		TIMESTAMP="$TIMESTAMP" \
			$(dirname "${BASH_SOURCE[0]}")/prepare $@

	# Only retain last three builds

	BUILD_COUNT=$(ls -1 "$BUILD_FOLDER_PREFIX/$1" | grep -vF '.log' | wc -l)

	if [[ $BUILD_COUNT -gt 3 ]]; then
		for BUILD_ID in $(ls -1 "$BUILD_FOLDER_PREFIX/$1" | grep -vF '.log' | sort | head -$(expr $BUILD_COUNT '-' 3)); do
			rm -rf "$BUILD_FOLDER_PREFIX/$1/$BUILD_ID"
		done
	fi

	# Clean up old logs as well

	rm -f $BUILD_FOLDER_PREFIX/$1/*.log

	for branch in master 70x 62x 61x; do
		local ACTIVE_BUILD=

		for LOG_ID in $(ls -1 "/var/www/html/builds/branches/" | grep -F $branch | grep -F '.log' | sort); do
			BUILD_ARCHIVE=$(echo "$LOG_ID" | sed 's/\.log//g').tar.gz

			if [ -f "/var/www/html/builds/branches/$BUILD_ARCHIVE" ]; then
				ACTIVE_BUILD=$BUILD_ARCHIVE
			elif [ "" == "$ACTIVE_BUILD" ]; then
				rm -f /var/www/html/builds/branches/$LOG_ID
			fi
		done
	done
}

branches() {
	if [ ! -d /var/www/html/builds/branches ]; then
		echo "No archive folder for branches, skipping"
		return 0
	fi

	# Clear out the data folder for all past builds

	for folder in $REBUILD; do
		for BUILD_ID in $(ls -1 "$BUILD_FOLDER_PREFIX/$folder" | grep -vF '.log'); do
			rm -rf "$BUILD_FOLDER_PREFIX/$folder/$BUILD_ID/data"
		done
	done

	# Start build

	echo Started $(date)

	# Build all branches

	for folder in $REBUILD; do
		if [ "master" == "$folder" ]; then
			branch master 60
		elif [ "70x" == "$folder" ]; then
			branch 70x 70
		elif [ "62x" == "$folder" ]; then
			branch 62x 62
		elif [ "61x" == "$folder" ]; then
			branch 61x 61
		fi
	done

	echo Completed $(date)

	# Finished build

	checkout master
}

checkout() {
	git clean -xdf
	git reset --hard
	git checkout $1
}

fixpack() {
	if [ -f "/var/www/html/builds/fixpacks/${1}.tar.gz" ]; then
		return 0
	fi

	if [ "" == "$(git tag | grep -F "$1")" ]; then
		git fetch --no-tags git@github.com:liferay/liferay-portal-ee.git tags/$1:refs/tags/$1

		if [ "" == "$(git tag | grep -F "$1")" ]; then
			return 1
		fi
	fi

	checkout $1

	BUILD_FOLDER_PREFIX="$BUILD_FOLDER_PREFIX/temp" \
		BUILD_FOLDER_SUFFIX="" \
		ARCHIVE_FOLDER="/var/www/html/builds/fixpacks" \
		TIMESTAMP="" \
			$(dirname "${BASH_SOURCE[0]}")/prepare $1 80

	rm -rf "$BUILD_FOLDER_PREFIX/temp/$1"
}

fixpacks() {
	if [ ! -d /var/www/html/builds/fixpacks ]; then
		echo "No archive folder for fixpacks, skipping"
		return 0
	fi

	git ls-remote -t git@github.com:liferay/liferay-portal-ee.git | \
		awk '{ print $2 }' | grep 'fix-pack-\(base-61\|base-62\|base-70\|de-\)' | \
		grep -v '\(test\|demo\)' | sort -t'-' -nk4,5 | cut -d'/' -f 3 > /var/www/html/builds/fixpacks/tags.txt

	for tag_id in $(cat /var/www/html/builds/fixpacks/tags.txt); do
		fixpack $tag_id
	done
}

update() {
	for remote in $(git remote -v | cut -f 1 | sort -u); do
		for remote_branch in $(git for-each-ref --format='%(refname)' refs/remotes/${remote}/ | cut -d'/' -f 4); do
			for local_branch in $(echo "$@" | sed 's/\([0-9]\)/\1./g'); do
				if [ "$remote_branch" == "$local_branch" ] || [ "$remote_branch" == "ee-$local_branch" ]; then
					git fetch $remote --no-tags $remote_branch
				fi
			done
		done
	done

	git reflog expire --expire=now --all
	git gc --prune
	return 0
}

if [ -z "${PORTAL_SOURCE_ROOT}" ]; then
	echo "Please set a PORTAL_SOURCE_ROOT for the build"
	exit 1
fi

if [ ! -e "$PORTAL_SOURCE_ROOT/.git" ]; then
	echo "${PORTAL_SOURCE_ROOT} is not a git repository"
	exit 1
fi

if [ -z "${BUILD_FOLDER_PREFIX}" ]; then
	echo "Please set a BUILD_FOLDER_PREFIX for the build"
	exit 1
fi

REBUILD="$@"

if [ "" == "$REBUILD" ]; then
	REBUILD="master 70x 62x 61x"
fi

cd $PORTAL_SOURCE_ROOT
update $REBUILD
branches $REBUILD
fixpacks