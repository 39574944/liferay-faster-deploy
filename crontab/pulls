#!/bin/bash

TIMESTAMP=$(date +%Y%m%d)

checkout() {
	git clean -xdf
	git reset --hard
	git checkout $1
}

prepare() {
	BUILD_FOLDER_PREFIX="$BUILD_FOLDER_PREFIX" \
		BUILD_FOLDER_SUFFIX="" \
		ARCHIVE_FOLDER="/var/www/html/builds" \
		TIMESTAMP="$TIMESTAMP" \
			$(dirname $0)/prepare $@
}

pull() {
	if [ "" == "$1" ]; then
		echo "Please specify a pull request ID"
		return 1
	fi

	if [ -f /var/www/html/builds/${1}-${TIMESTAMP}.tar.gz ]; then
		return 0
	fi

	tokens

	if [[ 0 -ne $? ]]; then
		return 1
	fi

	echo "Started build for pull request $pull_id at $(date)"

	if [ ! -d .git ]; then
		cd "$PORTAL_SOURCE_ROOT"
	fi

	if [ "" != "$(git branch | grep "pr-$1$")" ]; then
		git branch -D pr-$1
	fi

	git fetch --no-tags $ORIGIN_URL pull/$1/head:pr-$1

	if [ "" == "$(git branch | grep "pr-$1$")" ]; then
		echo "Failed to find pull request $1"
		return 1
	fi

	checkout pr-$1

	BASE_BRANCH=$2

	if [ "" == "$BASE_BRANCH" ]; then
		curl -H "Authorization: token $AUTH_TOKEN" -s $PULL_API_URL | \
			jq '.[] | {(.html_url):.base.ref}' | grep -v '[{}]' | tr -d '"' | tr -d ' ' > $HOME/pulls.txt.tmp

		BASE_BRANCH=$(grep '/pull/$1:' $HOME/pulls.txt.tmp | cut -d':' -f 3)

		rm -f $HOME/pulls.txt.tmp
	fi

	if [ "" == "$BASE_BRANCH" ]; then
		BASE_BRANCH=ee-$(grep -F 'lp.version.major=' release.properties | cut -d'=' -f 2).x
		echo "Pull $1 is not an open pull request, guessing base branch as $BASE_BRANCH"
	fi

	set -o pipefail
	git rebase upstream/$BASE_BRANCH | tee /var/www/html/builds/$1-${TIMESTAMP}.rebase
	EXIT_CODE=$?
	set +o pipefail

	if [[ $EXIT_CODE -ne 0 ]]; then
		git rebase --abort

		touch $HOME/fails.txt
		echo $1 >> $HOME/fails.txt

		return 0
	fi

	touch $HOME/builds.txt
	echo $1 >> $HOME/builds.txt

	prepare $1 80

	echo "Completed build for pull request $1 at $(date)"
}

pulls() {
	tokens

	if [[ 0 -ne $? ]]; then
		return 1
	fi

	cd "$PORTAL_SOURCE_ROOT"

	# Start build

	echo Started pull request builds at $(date)
	echo

	# Fetch list of open pull requests

	curl -H "Authorization: token $AUTH_TOKEN" -s $PULL_API_URL | \
		jq '.[] | {(.html_url):.base.ref}' | grep -v '[{}]' | tr -d '"' | tr -d ' ' > $HOME/pulls.txt

	# Checkout and build current pull requests

	cat /dev/null > $HOME/fails.txt
	cat /dev/null > $HOME/builds.txt

	for line in $(cat $HOME/pulls.txt); do
		pull_id=$(echo $line | cut -d':' -f 2 | grep -o '/pull/.*' | cut -d'/' -f 3)
		pull_branch=$(echo $line | cut -d':' -f 3)
		pull $pull_id $pull_branch
	done

	# Finished build

	checkout master

	echo
	echo Completed pull request builds at $(date)
}

tokens() {
	ARCHIVE_FOLDER=/var/www/html/builds

	PULL_USER=$(git config github.pull-user)

	if [ "" == "$PULL_USER" ]; then
		echo "Please set a pull request user: git config github.pull-user <username>"
		return 1
	fi

	AUTH_TOKEN=$(git config github.oauth-token)

	if [ "" == "$AUTH_TOKEN" ]; then
		echo "Please set a GitHub authentication token: git config github.oauth-token <token>"
		return 1
	fi

	ORIGIN_URL=git@github.com:${PULL_USER}/liferay-portal-ee.git
	PULL_API_URL=https://api.github.com/repos/${PULL_USER}/liferay-portal-ee/pulls
}

if [ -z "${PORTAL_SOURCE_ROOT}" ]; then
	echo "Please set a PORTAL_SOURCE_ROOT for the build"
	exit 1
fi

if [ ! -e "$PORTAL_SOURCE_ROOT/.git" ]; then
	echo "${PORTAL_SOURCE_ROOT} is not a git repository"
	exit 1
fi

if [ -z "${BUILD_FOLDER_PREFIX}" ]; then
	echo "Please set a BUILD_FOLDER_PREFIX for the build"
	exit 1
fi

pulls