#!/bin/bash

SCRIPT_FOLDER=$(dirname ${BASH_SOURCE[0]})

catalinaconf() {
	# Delete existing logs

	rm -f $CATALINA_HOME/logs/*

	# Identify a usable port

	local TOMCAT_PORT=$(python ${SCRIPT_FOLDER}/getport.py)

	if [ "" == "${TOMCAT_PORT}" ]; then
		return 1
	fi

	export TOMCAT_PORT_PREFIX=$(echo "${TOMCAT_PORT}" | sed 's/80$//')

	# Update the port in server.xml to the usable prot

	cd $CATALINA_HOME/conf

	if [ -f $CATALINA_HOME/conf/server.copy.xml ]; then
		cp -f server.copy.xml server.xml
	else
		cp -f server.xml server.copy.xml
	fi

	sed -i 's/\"80/\"'"$TOMCAT_PORT_PREFIX"'/' server.xml
	sed -i 's/unpackWARs=\"true\"/unpackWARs=\"false\"/' server.xml

	# Startup with JPDA by default

	cd $CATALINA_HOME/bin
	chmod u+x *.sh

	sed -i 's/ jpda start / start /g' startup.sh
	sed -i 's/ start / jpda start /g' startup.sh

	# Setup tcnative

	tcnative $1

	# Copy setenv.sh that knows how to adjust the default JPDA port
	# and use more memory.

	if [ ! -f setenv.sh ] || [[ "" == "$(grep jrebel setenv.sh)" ]]; then
		echo 'Adding JRebel-aware setenv.sh'
		cp ${SCRIPT_FOLDER}/setenv.sh .
	fi

	# Make sure we have a portal-ext.properties in LIFERAY_HOME

	touch $LIFERAY_HOME/portal-ext.properties

	if [ -d $CATALINA_HOME/webapps/manager ]; then
		echo '<?xml version="1.0" encoding="utf-8"?><tomcat-users><user username="tomcat" password="tomcat" roles="manager-gui,manager-script,manager-status,manager-jmx"/></tomcat-users>' > $CATALINA_HOME/conf/tomcat-users.xml
	fi
}

catalinastart() {
	. ${SCRIPT_FOLDER}/releaseinfo

	if [ "" == "${RELEASE_ID}" ]; then
		return 1
	fi

	javahome 8

	if [[ $RELEASE_ID -lt 7000 ]]; then
		javahome 6
	else
		javahome 8
	fi

	if [ "init" != "$1" ] && [ -f $LIFERAY_HOME/start_cluster ]; then
		$LIFERAY_HOME/start_cluster
		return 0
	fi

	# If the server is already running, we won't need to start it.
	# Check if the server is running.

	IS_RUNNING=

	for PROCESS_ID in $(jps | grep Bootstrap | cut -d' ' -f 1); do
		IS_RUNNING=$(ps --no-headers $PROCESS_ID | grep $LIFERAY_VERSION)

		if [ "" == "$IS_RUNNING" ]; then
			break
		fi
	done

	if [ "" == "$IS_RUNNING" ]; then
		catalinaconf

		if [[ 0 -ne $? ]]; then
			return 1
		fi

		# Start from a clean osgi/state folder, because that can cause
		# problems after redeploy.

		if [ -d $LIFERAY_HOME/osgi/state ]; then
			rm -rf $LIFERAY_HOME/osgi/state
		fi

		# Copy the database driver

		echo "Try to copy the database driver!"
		. ${SCRIPT_FOLDER}/../database/copydriver

		# Start Tomcat

		$CATALINA_HOME/bin/catalina.sh jpda run
	elif [ -f $CATALINA_HOME/logs/catalina.out ]; then
		tail -f $CATALINA_HOME/logs/catalina.out
	else
		echo Failed to start tomcat!
	fi
}

javahome() {
	. ${SCRIPT_FOLDER}/../javahome $@
}

tcnative() {
	# If this isn't Linux, don't try to compile it

	if [ "" == "$(which apt 2> /dev/null)" ] && [ "" == "$(which yum 2> /dev/null)" ]; then
		return 0
	fi

	# If we already generated tcnative, then we don't have to do anything.

	if [ -d $CATALINA_HOME/lib/apr ]; then
		return 0
	fi

	# This script isn't very smart yet, so just assume the default location
	# of apr-config is somewhere in /usr/bin.

	if [ ! -f /usr/bin/apr-config ]; then
		return 0
	fi

	# Now untar tcnative and build it

	cd $CATALINA_HOME/bin
	tar -zxf tomcat-native.tar.gz

	TOMCAT_NATIVE_FOLDER=

	for file in $(ls -1 $CATALINA_HOME/bin | grep tomcat-native | grep src); do
		TOMCAT_NATIVE_FOLDER=$file
	done

	if [ ! -d $CATALINA_HOME/bin/$TOMCAT_NATIVE_FOLDER ]; then
		return 1
	fi

	if [ -d $TOMCAT_NATIVE_FOLDER/jni/native ]; then
		cd $TOMCAT_NATIVE_FOLDER/jni/native
	else
		cd $TOMCAT_NATIVE_FOLDER/native
	fi

	./configure --with-apr=/usr --prefix=$CATALINA_HOME/lib/apr && make && make install
}

catalinastart $@