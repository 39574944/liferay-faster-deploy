#!/bin/bash

catalinaconf() {
	# Delete existing logs

	rm -f $CATALINA_HOME/logs/*

	# Identify a usable port

	for prefix in {80..99..1}; do
		export TOMCAT_PORT_PREFIX=$prefix
		TOMCAT_PORT_SUFFIX=80
		TOMCAT_PORT=$TOMCAT_PORT_PREFIX$TOMCAT_PORT_SUFFIX

		PROCESS_ID=$(lsof -b -a -i :$TOMCAT_PORT -t -c java)

		if [ "" != "$PROCESS_ID" ]; then
			PROCESS_ID=$(ps --no-headers $PROCESS_ID | grep tomcat | sed 's/^ *//g' | cut -d' ' -f 1)
		fi

		if [ "" == "$PROCESS_ID" ]; then
			break
		fi
	done

	# Update the port in server.xml to the usable prot

	cd $CATALINA_HOME/conf

	if [ -f $CATALINA_HOME/conf/server.copy.xml ]; then
		cp -f server.copy.xml server.xml
	else
		cp -f server.xml server.copy.xml
	fi

	sed -i 's/\"80/\"'"$TOMCAT_PORT_PREFIX"'/' server.xml
	sed -i 's/unpackWARs=\"true\"/unpackWARs=\"false\"/' server.xml

	# Startup with JPDA by default

	cd $CATALINA_HOME/bin
	chmod u+x *.sh

	sed -i 's/ jpda start / start /g' startup.sh
	sed -i 's/ start / jpda start /g' startup.sh

	# Setup tcnative

	tcnative $1

	# Precompile JSPs

	local JSP_JAVA_VERSION=1.8

	if [[ $RELEASE_ID -lt 7000 ]]; then
		JSP_JAVA_VERSION=1.6
	fi

	ant -f $(dirname ${BASH_SOURCE[0]})/precompile.xml \
		-Dtomcat.home.dir="$CATALINA_HOME" -Dwebapp.home=ROOT -Dwebapp.work=_ \
		-Djsp.java.version=$JSP_JAVA_VERSION

	# Copy setenv.sh that knows how to adjust the default JPDA port
	# and use more memory.

	if [ ! -f setenv.sh ] || [[ "" != "$(grep 1024m setenv.sh)" ]]; then
		cp $(dirname ${BASH_SOURCE[0]})/setenv.sh .
	fi

	# Make sure we have a portal-ext.properties in LIFERAY_HOME

	touch $LIFERAY_HOME/portal-ext.properties
}

catalinastart() {
	# If we are in the root of portal source, try to guess the Tomcat folder.
	# Otherwise, if we are in a Tomcat folder, assume we've got the right one.

	if [ "" == "$(pwd | grep -F '/tomcat-')" ]; then
		. $(dirname ${BASH_SOURCE[0]})/../appserverprops
	else
		LIFERAY_HOME=$(dirname $(pwd | grep -o '.*/tomcat-[^/]*'))
		TOMCAT_FOLDER=$(basename $(pwd | grep -o '.*/tomcat-[^/]*'))
	fi

	if [ "" == "$LIFERAY_HOME" ] || [ ! -d "$LIFERAY_HOME" ]; then
		echo "Unable to determine liferay.home"
		return 1
	fi

	if [ "" == "$TOMCAT_FOLDER" ]; then
		echo "Could not determine which Tomcat to start!"
		return 1
	fi

	CATALINA_HOME=$LIFERAY_HOME/$TOMCAT_FOLDER

	if [ ! -d "$CATALINA_HOME" ]; then
		echo "Could not find $CATALINA_HOME to start!"
		return 1
	fi

	# Use portal-kernel/portal-service to determine the current
	# Liferay version in order to decide on the Java version to use

	RELEASE_INFO_JAR=$CATALINA_HOME/lib/ext/portal-kernel.jar

	if [ ! -f $RELEASE_INFO_JAR ]; then
		RELEASE_INFO_JAR=$CATALINA_HOME/lib/ext/portal-service.jar
	fi

	javahome 8

	RELEASE_ID=$(groovy -classpath $RELEASE_INFO_JAR -e 'print com.liferay.portal.kernel.util.ReleaseInfo.getBuildNumber()')

	if [[ $RELEASE_ID -lt 7000 ]]; then
		javahome 6
	fi

	# If the server is already running, we won't need to start it.
	# Check if the server is running.

	IS_RUNNING=

	for PROCESS_ID in $(jps | grep Bootstrap | cut -d' ' -f 1); do
		IS_RUNNING=$(ps --no-headers $PROCESS_ID | grep $LIFERAY_VERSION)

		if [ "" == "$IS_RUNNING" ]; then
			break
		fi
	done

	if [ "" == "$IS_RUNNING" ]; then
		catalinaconf

		# Start from a clean osgi/state folder, because that can cause
		# problems after redeploy.

		if [ -d $LIFERAY_HOME/osgi/state ]; then
			rm -rf $LIFERAY_HOME/osgi/state
		fi

		$CATALINA_HOME/bin/startup.sh
	fi

	# At this point, figure out if we successfully have a running Tomcat.

	if [ -f $CATALINA_HOME/logs/catalina.out ]; then
		tail -f $CATALINA_HOME/logs/catalina.out
	else
		echo Failed to start tomcat!
	fi
}

javahome() {
	. $(dirname ${BASH_SOURCE[0]})/../javahome $@
}

tcnative() {
	# If we already generated tcnative, then we don't have to do anything.

	if [ -d $CATALINA_HOME/lib/apr ]; then
		return 0
	fi

	# This script isn't very smart yet, so just assume the default location
	# of apr-config is somewhere in /usr/bin.

	if [ ! -f /usr/bin/apr-config ]; then
		return 0
	fi

	# Now untar tcnative and build it

	cd $CATALINA_HOME/bin
	tar -zxf tomcat-native.tar.gz

	TOMCAT_NATIVE_FOLDER=

	for file in $(ls -1 $CATALINA_HOME/bin | grep tomcat-native | grep src); do
		TOMCAT_NATIVE_FOLDER=$file
	done

	if [ ! -d $CATALINA_HOME/bin/$TOMCAT_NATIVE_FOLDER ]; then
		return 1
	fi

	if [ -d $TOMCAT_NATIVE_FOLDER/jni/native ]; then
		cd $TOMCAT_NATIVE_FOLDER/jni/native
	else
		cd $TOMCAT_NATIVE_FOLDER/native
	fi

	./configure --with-apr=/usr --prefix=$CATALINA_HOME/lib/apr && make && make install
}

catalinastart