#!/bin/bash

appserverprops() {
	if [ -f portal-ext.properties ]; then
		LIFERAY_HOME=${PWD}
	else
		. $(dirname ${BASH_SOURCE[0]})/../appserverprops
	fi
}

bundle() {
	ATTACH_LOG='no' \
	LIFERAY_RELEASES_MIRROR=${LIFERAY_RELEASES_MIRROR} \
	LIFERAY_FILES_MIRROR=${LIFERAY_FILES_MIRROR} \
	BRANCH_ARCHIVE_MIRROR=${BRANCH_ARCHIVE_MIRROR} \
	LICENSE_MIRROR=${LICENSE_MIRROR} \
	RELEASE_ID=${RELEASE_ID} \
	LIFERAY_PASSWORD=${LIFERAY_PASSWORD} \
	DRIVERS_FOLDER=${DRIVERS_FOLDER} \
	JVM_HEAP_SIZE=${JVM_HEAP_SIZE} \
	NETWORK_NAME=${NETWORK_NAME} \
	IMAGE_NAME=${IMAGE_NAME} \
		$(dirname ${BASH_SOURCE[0]})/bundle "$1" "$2" "$3"
}

clean() {
	if [ "" == "$(docker ps -a | grep -o " ${NETWORK_NAME}-${1}[0-9]*")" ]; then
		return 0
	fi

	timeecho "Removing ${NETWORK_NAME}-$1 cluster nodes"

	if [ "" != "$(docker ps | grep -o " ${NETWORK_NAME}-${1}[0-9]*")" ]; then
		docker ps | grep -o " ${NETWORK_NAME}-${1}[0-9]*" | xargs docker stop
	fi

	docker ps -a | grep -o " ${NETWORK_NAME}-${1}[0-9]*" | xargs docker rm -v
}

elasticsearch() {
	if [[ ${HOTFIX_LEVEL} == 6.1.* ]] || [[ ${HOTFIX_LEVEL} == *-6130 ]] || [[ ${HOTFIX_LEVEL} == *-6130.zip ]]; then
		return 0
	elif [[ ${HOTFIX_LEVEL} == portal-* ]] || [[ ${HOTFIX_LEVEL} == 6.2.* ]] || [[ ${HOTFIX_LEVEL} == *-6210 ]] || [[ ${HOTFIX_LEVEL} == *-6210.zip ]]; then
		return 0
	elif [ -f release.properties ] && [ "" != "$(grep -F 'lp.version=6.' release.properties)" ]; then
		return 0
	fi

	updatedocker 'holatuwol/liferay-elasticsearch'

	if [ "" == "${ELASTIC_NODE_COUNT}" ]; then
		ELASTIC_NODE_COUNT=1
	fi

	timeecho "Starting ${ELASTIC_NODE_COUNT} Elasticsearch nodes"
	mkdir -p ${LIFERAY_HOME}/osgi/configs

	local ELASTIC_NODE_LIST=$(seq ${ELASTIC_NODE_COUNT} | awk '{ print "\"elastic" $1 ":9300\"" }' | tr '\n' ',' | sed 's/,$//g')

	echo '
operationMode="REMOTE"
clientTransportIgnoreClusterName="false"
indexNamePrefix="liferay-"
httpCORSConfigurations=""
additionalConfigurations=""
httpCORSAllowOrigin="/https?://localhost(:[0-9]+)?/"
networkBindHost=""
transportTcpPort=""
syncSearch="true"
bootstrapMlockAll="false"
networkPublishHost=""
overrideTypeMappings=""
clientTransportSniff="true"
additionalIndexConfigurations=""
retryOnConflict="5"
httpCORSEnabled="true"
clientTransportNodesSamplerInterval="5s"
additionalTypeMappings=""
logExceptionsOnly="true"
httpEnabled="true"
networkHost=""
transportAddresses=
clusterName="LiferayElasticsearchCluster"
discoveryZenPingUnicastHostsPort="9300-9400"
' > ${LIFERAY_HOME}/osgi/configs/com.liferay.portal.search.elasticsearch.configuration.ElasticsearchConfiguration.config

	sed -i.bak "s/transportAddresses=.*$/transportAddresses=[${ELASTIC_NODE_LIST}]/g" \
		${LIFERAY_HOME}/osgi/configs/com.liferay.portal.search.elasticsearch.configuration.ElasticsearchConfiguration.config

	local ELASTIC_VERSION=6.1

	if [ "7.0.x" == "${HOTFIX_LEVEL}" ] || [[ ${HOTFIX_LEVEL} == de-* ]] || [[ ${HOTFIX_LEVEL} == *-7010 ]] || [[ ${HOTFIX_LEVEL} == *-7010.zip ]]; then
		ELASTIC_VERSION=2.4
	elif [ -f release.properties ] && [ "" != "$(grep -F 'lp.version=7.0' release.properties)" ]; then
		ELASTIC_VERSION=2.4
	elif [[ 262144 -gt $(sysctl vm.max_map_count | cut -d'=' -f 2) ]]; then
		timeecho "Unable to start Elasticsearch ${ELASTIC_VERSION}"
		timeecho "https://www.elastic.co/guide/en/elasticsearch/reference/${ELASTIC_VERSION}/vm-max-map-count.html#vm-max-map-count"
		return 1
	fi

	for i in $(seq ${ELASTIC_NODE_COUNT}); do
		if docker inspect ${NETWORK_NAME}-elastic$i 1> /dev/null 2> /dev/null; then
			docker start ${NETWORK_NAME}-elastic$i
			continue
		fi

		docker run -d \
			--name ${NETWORK_NAME}-elastic$i --network ${NETWORK_NAME} --network-alias elastic$i \
			holatuwol/liferay-elasticsearch:${ELASTIC_VERSION}
	done
}

liferay() {
	updatedocker 'holatuwol/liferay'

	if [ "" != "${LIFERAY_HOME}" ]; then
		cd ${LIFERAY_HOME}
	fi

	mkdir -p data/document_library
	touch portal-ext.properties

	START_TIME=$(date '+%s')

	timeecho "Starting primary node..."

	if startnode 1; then
		timeecho "Waiting for primary node startup to complete..."
		waitfornode 1

		if [[ 1 != $NODE_COUNT ]]; then
			timeecho "Starting secondary nodes..."

			for i in $(seq 2 $NODE_COUNT); do
				startnode $i
			done

			timeecho "Waiting for $(expr ${NODE_COUNT} '-' 1) secondary node startups to complete..."

			for i in $(seq 2 $NODE_COUNT); do
				waitfornode $i
			done
		fi
	else
		return 1
	fi
}

mysqldb() {
	if [ -f ${LIFERAY_HOME}/portal-ext.properties ] && [ "" != "$(grep -F 'jdbc.default.driverClassName' ${LIFERAY_HOME}/portal-ext.properties)" ] && [ "" == "$(grep -F 'mysqldb' ${LIFERAY_HOME}/portal-ext.properties)" ]; then
		local GATEWAY=$(docker network inspect ${NETWORK_NAME} | jq '.[] | .IPAM.Config | .[].Gateway' | cut -d'"' -f 2)

		sed -i.bak "s/127.0.0.1/${GATEWAY}/g" ${LIFERAY_HOME}/portal-ext.properties
		sed -i.bak "s/localhost/${GATEWAY}/g" ${LIFERAY_HOME}/portal-ext.properties

		return 0
	fi

	timeecho "Starting MySQL database..."

	CONTAINER_NAME=${NETWORK_NAME}-mysql DB_HOST_NAME='mysqldb' DRIVERS_FOLDER=${DRIVERS_FOLDER} \
		$(dirname ${BASH_SOURCE[0]})/../database/mysql

	if [ "" == "$(docker network inspect ${NETWORK_NAME} | grep -F ${NETWORK_NAME}-mysql)" ]; then
		docker network connect --alias mysqldb ${NETWORK_NAME} ${NETWORK_NAME}-mysql
	fi

	docker exec ${NETWORK_NAME}-mysql mysql -e 'use lportal; drop table if exists JGROUPSPING;'
}

network() {
	if [ "" == "${NETWORK_NAME}" ]; then
		if [ "" == "$1" ]; then
			NETWORK_NAME='test'
		else
			NETWORK_NAME="$1"
		fi
	fi

	if docker network inspect ${NETWORK_NAME} 1> /dev/null 2> /dev/null; then
		return 0
	fi

	timeecho "${NETWORK_NAME} containers will join a newly-created ${NETWORK_NAME} network."
	docker network create ${NETWORK_NAME}
}

startnode() {
	local PORT_NUMBER=$(python $(dirname ${BASH_SOURCE[0]})/getport.py)

	timeecho "Starting ${NETWORK_NAME}-liferay${1} on port ${PORT_NUMBER}"

	bundle "${HOTFIX_LEVEL}" "${PORT_NUMBER}" "${NETWORK_NAME}-liferay${1}"
}

timeecho() {
	echo "$(date '+%H:%M') $@"
}

updatedocker() {
	timeecho "Updating $1 from DockerHub..."
	docker pull --all-tags "$1"

	if [ "" != "$(docker images -a --filter=dangling=true -q)" ]; then
		docker images -a --filter=dangling=true -q | xargs docker rmi
	fi
}

waitfornode() {
	while [ "" == "$(docker logs --since="${START_TIME}" "${NETWORK_NAME}-liferay${1}" 2>&1 | grep -F 'Server startup')" ]; do
		sleep 1
	done
}

if [ "stop" == "$1" ]; then
	network $2

	if [ "" != "$(docker network inspect ${NETWORK_NAME} | jq '.[].Containers | .[].Name')" ]; then
		docker network inspect ${NETWORK_NAME} | jq '.[].Containers | .[].Name' | cut -d'"' -f 2 | xargs docker stop
	fi
elif [ "clean" == "$1" ]; then
	network $2

	clean liferay && clean elastic && clean mysql
elif [ "restart" == "$1" ]; then
	network $2

	appserverprops && mysqldb && elasticsearch && liferay
else
	HOTFIX_LEVEL=$1

	network $2

	if [ "" == "${NODE_COUNT}" ]; then
		NODE_COUNT=$3
	fi

	if [ "" == "$NODE_COUNT" ]; then
		NODE_COUNT=2
	fi

	appserverprops && mysqldb && elasticsearch && clean liferay && liferay
fi