#!/bin/bash

SCRIPT_FOLDER=$(dirname ${BASH_SOURCE[0]})

copy_driver() {
	if [ "" == "${CATALINA_HOME}" ]; then
		mkdir -p ${LIFERAY_HOME}/tomcat/lib/ext
		CATALINA_HOME=${LIFERAY_HOME}/tomcat
	fi

	. ${SCRIPT_FOLDER}/../database/copydriver
}

create_network() {
	NETWORK_METADATA=

	if [ "" == "${NETWORK_NAME}" ]; then
		if [ -f ${LIFERAY_HOME}/portal-ext.properties ]; then
			local GATEWAY=$(docker network inspect bridge | jq '.[] | .IPAM.Config | .[].Gateway' | cut -d'"' -f 2)

			sed -i.bak "s/127.0.0.1/${GATEWAY}/g" ${LIFERAY_HOME}/portal-ext.properties
			sed -i.bak "s/localhost/${GATEWAY}/g" ${LIFERAY_HOME}/portal-ext.properties
		fi

		return 0
	fi

	if [ -d ${LIFERAY_HOME}/osgi/portal ] && [ ! -f ${LIFERAY_HOME}/osgi/portal/com.liferay.portal.cluster.multiple.jar ]; then
		echo "Unable to find clustering module in ${LIFERAY_HOME}."
		echo "Are you sure built a private branch?"
		return 1
	fi

	if [ ! -f ${LIFERAY_HOME}/portal-ext.properties ] || [ "" == "$(grep -F jdbc.default ${LIFERAY_HOME}/portal-ext.properties | grep -vF '#')" ]; then
		echo "You need to have a portal-ext.properties with a database connection to cluster."
		return 1
	fi

	if docker network inspect ${NETWORK_NAME} 1> /dev/null 2> /dev/null; then
		echo ${CONTAINER_NAME} will join the existing ${NETWORK_NAME} network
	else
		echo ${CONTAINER_NAME} will join the newly-created ${NETWORK_NAME} network
		docker network create ${NETWORK_NAME}
	fi

	NETWORK_METADATA="--network ${NETWORK_NAME} --network-alias ${CONTAINER_NAME} -e IS_CLUSTER=true"
}

get_hotfix_url() {
	if [[ $1 != https://patcher.liferay.com/* ]]; then
		HOTFIX_URL=$1
		return 0
	fi

	if [ "" == "$(git config files.username)" ] || [ "" == "$(git config files.password)" ]; then
		echo "Cannot decode $1 unless files.username and files.password are set with git config --global"
		return 1
	fi

	HOTFIX_URL=$("$(dirname "${SCRIPT_FOLDER}")/patcher/findhotfix" "$1")

	if [ "" == "${HOTFIX_URL}" ]; then
		echo "Unable to decode $1 into a hotfix name"
		return 1
	fi
}

remove_container() {
	docker stop ${CONTAINER_NAME} 1> /dev/null 2> /dev/null
	docker rm -v ${CONTAINER_NAME} 1> /dev/null 2> /dev/null
}

set_container_mounts() {
	mkdir -p ${HOME}/.liferay/builds

	LIFERAY_RDBUILD_MOUNT="-v ${HOME}/.liferay/builds:/rdbuild"

	mkdir -p ${HOME}/.liferay/release

	LIFERAY_RELEASE_MOUNT="-v ${HOME}/.liferay/release:/release"

	if [ -d document_library ]; then
		LIFERAY_RELEASE_MOUNT="-v ${PWD}/document_library:/opt/liferay/data/document_library"
	elif [ -d data/document_library ]; then
		LIFERAY_RELEASE_MOUNT="-v ${PWD}/data/document_library:/opt/liferay/data/document_library"
	fi

	if [ "" != "${LIFERAY_HOME}" ]; then
		LIFERAY_HOME_MOUNT="-v ${PWD}:/build"
	elif [ "$PWD" == "${HOME}" ]; then
		echo "Unable to determine LIFERAY_HOME"
		echo "Please run from a folder other than ${HOME} containing portal-ext.properties"
		return 1
	elif [ -f portal-ext.properties ] || [ -d drivers ] || [ -d patches ]; then
		LIFERAY_HOME=${PWD}
		LIFERAY_HOME_MOUNT="-v ${PWD}:/build"
	elif [ -d bundles ]; then
		LIFERAY_HOME="${PWD}/bundles"
		LIFERAY_HOME_MOUNT="-v ${PWD}/bundles:/build"
	elif [ -f app.server.$USER.properties ]; then
		. "$(dirname ${SCRIPT_FOLDER})/appserverprops"
		LIFERAY_HOME_MOUNT="-v ${LIFERAY_HOME}:/build"
	else
		echo "Unable to determine LIFERAY_HOME"
		echo "Please touch portal-ext.properties if you wish to use the current folder as LIFERAY_HOME"
		return 1
	fi

	local TOMCAT_FOLDER="$(ls ${LIFERAY_HOME} | grep '^tomcat-')"

	if [ "" != "${TOMCAT_FOLDER}" ]; then
		if [ "" != "$1" ]; then
			echo "You asked to start a container running $1 rather than a bundle built from source"
			echo "However, there is a '${TOMCAT_FOLDER}' folder present in ${LIFERAY_HOME} that would be copied to the container"
			echo "Cowardly refusing to create the Docker container"
			return 1
		else
			CATALINA_HOME="${LIFERAY_HOME}/${TOMCAT_FOLDER}"
		fi
	else
		CATALINA_HOME="${LIFERAY_HOME}/tomcat"
	fi
}

set_container_name() {
	if [ "" != "${CONTAINER_NAME}" ]; then
		return 0
	fi

	if [ "" != "$1" ] && [[ $1 =~ ^[0-9]*$ ]]; then
		CONTAINER_NAME="test$1"
	else
		CONTAINER_NAME="$1"
	fi
}

set_image_name() {
	if [ "" != "${IMAGE_NAME}" ]; then
		return 0
	fi

	if [[ $1 == 6.1.* ]] || [[ $1 == *-6130 ]] || [[ $1 == *-6130.zip ]]; then
		IMAGE_NAME="holatuwol/liferay:openjdk7"
	elif [[ $1 == portal-* ]] || [[ $1 == 6.2.* ]] || [[ $1 == *-6210 ]] || [[ $1 == *-6210.zip ]]; then
		IMAGE_NAME="holatuwol/liferay:openjdk7"
	else
		IMAGE_NAME="holatuwol/liferay:openjdk8"
	fi
}

start_liferay() {
	if [ "" == "${TOMCAT_PORT}" ]; then
		TOMCAT_PORT=$2
	fi

	if [ "" == "${TOMCAT_PORT}" ]; then
		TOMCAT_PORT=$(python "${SCRIPT_FOLDER}/getport.py")
	fi

	if [ "" == "${TOMCAT_PORT}" ]; then
		TOMCAT_PORT=8080
	fi

	if [ "" != "$3" ]; then
		set_container_name $3
	else
		set_container_name ${TOMCAT_PORT}
	fi

	remove_container

	if ! create_network; then
		return 1
	fi

	copy_driver

	local INCREMENT=$(expr ${TOMCAT_PORT} '-' 8080)
	local GLOBAL_BIND="$(echo 8009 8080 8443 | tr ' ' '\n' | awk '{ print  "--publish " $1+'${INCREMENT}' ":" $1 }' | xargs)"
	local LOCAL_BIND="$(echo 8000 11311 | tr ' ' '\n' | awk '{ print  "--publish 127.0.0.1:" $1+'${INCREMENT}' ":" $1 }' | xargs)"
	local EXPOSE_ONLY="$(echo 7800 7801 | tr ' ' '\n' | awk '{ print  "--expose " $1 }' | xargs)"

	local MIRRORS=

	if [ "" != "${BRANCH_ARCHIVE_MIRROR}" ]; then
		MIRRORS="${MIRRORS} -e BRANCH_ARCHIVE_MIRROR=${BRANCH_ARCHIVE_MIRROR}"
	fi

	if [ "" != "${LIFERAY_FILES_MIRROR}" ]; then
		MIRRORS="${MIRRORS} -e LIFERAY_FILES_MIRROR=${LIFERAY_FILES_MIRROR}"
	fi

	if [ "" != "${LIFERAY_RELEASES_MIRROR}" ]; then
		MIRRORS="${MIRRORS} -e LIFERAY_RELEASES_MIRROR=${LIFERAY_RELEASES_MIRROR}"
	fi

	if [ "" != "${LICENSE_MIRROR}" ]; then
		MIRRORS="${MIRRORS} -e LICENSE_MIRROR=${LICENSE_MIRROR}"
	fi

	if get_hotfix_url $1; then
		docker run ${GLOBAL_BIND} ${LOCAL_BIND} ${EXPOSE_ONLY} \
			${LIFERAY_HOME_MOUNT} ${LIFERAY_RDBUILD_MOUNT} ${LIFERAY_RELEASE_MOUNT} ${DOCLIB_MOUNT} \
			-e RELEASE_ID=${RELEASE_ID} \
			-e LIFERAY_PASSWORD=${LIFERAY_PASSWORD} \
			-e IS_UPGRADE=${IS_UPGRADE} \
			-e JVM_HEAP_SIZE=${JVM_HEAP_SIZE} \
			${MIRRORS} ${NETWORK_METADATA} ${EXTRA_ARGS} --name ${CONTAINER_NAME} \
			--detach ${IMAGE_NAME} ${HOTFIX_URL}

		if [ "no" != "${ATTACH_LOG}" ]; then
			docker logs -f ${CONTAINER_NAME}
		fi
	else
		return 1
	fi
}

if [ "" == "${LIFERAY_PASSWORD}" ]; then
	LIFERAY_PASSWORD='test'
fi

set_container_mounts "$1" && \
	set_image_name "$1" && \
	echo "Using Docker image ${IMAGE_NAME}" && \
	start_liferay "$1" "$2" "$3"