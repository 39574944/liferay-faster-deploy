#!/bin/bash

cachenpm() {
	cache_home="$HOME/.liferay/node/cache"

	if [ "clean" == "$1" ]; then
		rm -rf "${cache_home}"
	fi

	if [ "" != "$(which yarn)" ]; then
		NPM_INSTALL='yarn'
	else
		NPM_INSTALL='npm install'
	fi

	findmodules $@

	#globalcache $@
	#modulecache $@
	modulerun $@

	NPM_PRODUCTION=$(npm config get production)
	npm config set production false

	if [ "" != "$NPM_PRODUCTION" ] && [ "false" != "$NPM_PRODUCTION" ]; then
		npm config set production $NPM_PRODUCTION
	fi
}

dirnames() {
	python $(dirname "${BASH_SOURCE[0]}")/dirnames.py
}

disablegwnpm() {
	$(dirname "${BASH_SOURCE[0]}")/disablegwnpm
}

findmodules() {
	mkdir -p "${cache_home}"
	cat /dev/null > "${cache_home}/cachenpm.txt"

	pushd "$GIT_ROOT" > /dev/null

	if [ "" == "$1" ]; then
		for folder in $(git ls-files modules | grep -F package.json | dirnames); do
			if [ ! -f "$folder/.lfrbuild-portal" ]; then
				continue
			fi

			echo "$PWD/$folder/package.json" >> "${cache_home}/cachenpm.txt"
		done
	elif [ -d "$1" ]; then
		if [ -f package.json ]; then
			echo "$1/package.json" >> "${cache_home}/cachenpm.txt"
		fi
	else
		$(dirname "${BASH_SOURCE[0]}")/gitchanges $@

		for folder in $(cat .redeploy/changes_gradle_2.txt); do
			if [ ! -f "$folder/package.json" ]; then
				continue
			fi

			echo "$PWD/$folder/package.json" >> "${cache_home}/cachenpm.txt"
		done
	fi

	popd > /dev/null
}

globalcache() {
	mkdir -p "${cache_home}/node_modules"

	for package_json in $(cat ${cache_home}/cachenpm.txt | dirnames); do
		if [ ! -h "$folder/node_modules" ]; then
			rm -rf "$folder/node_modules"
			softlink "$folder/node_modules" "${cache_home}/node_modules"
		fi
	done

	cp -a $(dirname "${BASH_SOURCE[0]}")/cachenpm.py ${cache_home}/cachenpm.py

	pushd "${cache_home}" > /dev/null

	if [ -f package.json ]; then
		mv package.json package.json.old
	fi

	python cachenpm.py

	if [ -f package.json.old ] && [ "" == "$(diff package.json package.json.old)" ]; then
		echo 'package.json has no changes'
	else
		$NPM_INSTALL
	fi

	rm package.json.old

	popd > /dev/null
}

modulecache() {
	if [ -f /usr/bin/md5sum ]; then
		MD5SUM=/usr/bin/md5sum
	elif [ -f /sbin/md5 ]; then
		MD5SUM="/sbin/md5 -r"
	else
		echo "Unable to compute MD5 checksums"
		return 1
	fi

	for folder in $(cat ${cache_home}/cachenpm.txt | dirnames); do
		cache_hash=$(jq '.dependencies, .devDependencies' $folder/package.json | $MD5SUM | cut -d' ' -f 1)
		cache_file="${cache_home}/${cache_hash}.tar.gz"

		pushd $folder > /dev/null

		if [ -f "$cache_file" ]; then
			cache_time=$(perl -MPOSIX -e 'print POSIX::strftime "%Y%m%d%H%M.%S", localtime((stat $ARGV[0])[9])' "${cache_file}")
			folder_time=

			if [ -d "node_modules" ]; then
				folder_time=$(perl -MPOSIX -e 'print POSIX::strftime "%Y%m%d%H%M.%S", localtime((stat $ARGV[0])[9])' node_modules)
			fi

			if [ "$cache_time" != "$folder_time" ]; then
				echo "Restoring cache for $folder"

				rm -rf node_modules
				tar -zxf "${cache_file}"
				touch -t $cache_time node_modules
			fi

			popd > /dev/null
			continue
		fi

		echo "Caching build for $folder"
		rm -rf node_modules

		if [ -d "$folder/node_modules" ] && [ ! -f "$folder/yarn.lock" ]; then
			npm install && tar -zcf "$cache_file" node_modules
		else
			$NPM_INSTALL && tar -zcf "$cache_file" node_modules
		fi

		if [ -f "$cache_file" ]; then
			cache_time=$(perl -MPOSIX -e 'print POSIX::strftime "%Y%m%d%H%M.%S", localtime((stat $ARGV[0])[9])' "$cache_file")
			touch -t $cache_time node_modules
		fi

		popd > /dev/null
	done
}

modulerun() {
	for folder in $(cat ${cache_home}/cachenpm.txt | dirnames); do
		pushd $folder > /dev/null

		if [ -d "$folder/node_modules" ] && [ ! -f "$folder/yarn.lock" ]; then
			npm install
		else
			$NPM_INSTALL
		fi

		popd > /dev/null
	done
}

softlink() {
	# Taken from http://stackoverflow.com/questions/18641864/git-bash-shell-fails-to-create-symbolic-links

	if [[ -z "$2" ]]; then
		# Link-checking mode.
		if [[ -n "$WINDIR" ]]; then
			fsutil reparsepoint query "$1" > /dev/null
		else
			[[ -h "$1" ]]
		fi
	else
		# Link-creation mode.
		if [[ -n "$WINDIR" ]]; then
			# Windows needs to be told if it's a directory or not. Infer that.
			# Also: note that we convert `/` to `\`. In this case it's necessary.
			if [[ -d "$2" ]]; then
				cmd <<< "mklink /D \"$1\" \"${2//\//\\}\"" > /dev/null
			else
				cmd <<< "mklink \"$1\" \"${2//\//\\}\"" > /dev/null
			fi
		else
			# You know what? I think ln's parameters are backwards.
			ln -s "$2" "$1"
		fi
	fi
}

cachenpm $@ && disablegwnpm