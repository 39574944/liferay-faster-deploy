#!/bin/bash

cachenpm() {
	echo "node $(node --version), npm $(npm -version), yarn $(yarn --version)"

	cache_home="$HOME/.liferay/node/cache"

	if [ "clean" == "$1" ]; then
		rm -rf "${cache_home}"
	fi

	findmodules $@

	local NPM_PRODUCTION=$(npm config get production)
	npm config set production false

	local NPM_REGISTRY=$(npm config get registry)

	if [ "https://registry.npmjs.org/" == "$NPM_REGISTRY" ]; then
		npm config set registry http://registry.npmjs.org/
		npm config set strict-ssl false
	fi

	local CACHE_STRATEGY=$(npm config get cachenpm-cache-strategy)

	if [ ! -f "$(dirname "${BASH_SOURCE[0]}")/$CACHE_STRATEGY" ]; then
		CACHE_STRATEGY=modulecache
	fi

	pushd "$GIT_ROOT" > /dev/null

	. "$(dirname "${BASH_SOURCE[0]}")/${CACHE_STRATEGY}" $@

	popd > /dev/null

	if [ "" != "$NPM_PRODUCTION" ] && [ "false" != "$NPM_PRODUCTION" ]; then
		npm config set production $NPM_PRODUCTION
	fi
}

dirnames() {
	python $(dirname "${BASH_SOURCE[0]}")/../dirnames.py
}

findmodules() {
	mkdir -p "${cache_home}"
	cat /dev/null > "${cache_home}/cachenpm.txt"

	pushd "$GIT_ROOT" > /dev/null

	if [ "" == "$1" ]; then
		if [ -d modules ]; then
			for folder in $(find modules -name .lfrbuild-portal | grep -vF '/src/' | dirnames); do
				if [ -f "$folder/package.json" ]; then
					echo "$folder/package.json" >> "${cache_home}/cachenpm.txt"
				fi
			done
		else
			for folder in $(find . -name build.gradle | grep -vF '/src/' | dirnames); do
				if [ -f "$folder/package.json" ]; then
					echo "$folder/package.json" >> "${cache_home}/cachenpm.txt"
				fi
			done
		fi
	else
		if [ -f "$1/build.gradle" ]; then
			echo "$1" > .includes
		else
			$(dirname "${BASH_SOURCE[0]}")/../gitchanges $@

			cp .redeploy/changes_gradle_2.txt .includes
		fi

		if [[ 0 -ne $(cat .includes | grep -c '^') ]]; then
			transitiveincludes

			for folder in $(cat .includes); do
				if [ ! -f "$folder/package.json" ]; then
					continue
				fi

				echo "$folder/package.json" >> "${cache_home}/cachenpm.txt"
			done
		fi

		rm -f .includes
	fi

	popd > /dev/null
}

setopts() {
	. $(dirname ${BASH_SOURCE[0]})/../setopts
}

transitiveincludes() {
	if [[ 0 -eq $(cat .includes | grep -c '^') ]]; then
		return 0
	fi

	cp -f .includes .includes_transitive

	old_count=0
	new_count=$(cat .includes | sort -u | grep -c '^')

	git ls-files modules | grep -F '/build.gradle' | grep -vF '/src/' > .redeploy/gradle_list.txt
	git ls-files modules | grep -F '/bnd.bnd' | grep -vF '/src/' | xargs grep Bundle-SymbolicName | grep -vF '{' | sed 's/Bundle-SymbolicName: //g' > .redeploy/bnd_list.txt

	while [[ $old_count -ne $new_count ]]; do
		old_count=$new_count
		old_files=$(cat .includes_transitive)

		project_dependencies=$(echo -n "$old_files" | awk '{ print $1 "/build.gradle" }' | xargs grep -o 'project(":[^"]*' | cut -d'"' -f 2 | tr ':' '/' | awk '{ print "modules" $1 }' | tr '\n' ' ' | tr -d '\r' | sed 's/ /\\|/g')

		if [ "" != "$project_dependencies" ]; then
			echo -n "$build_gradles" | xargs grep -l "\($project_dependencies\)" > .includes_transitive
		fi

		library_dependencies=$(echo "$old_files" | awk '{ print $1 "/build.gradle" }' | xargs grep -o 'name: "com.liferay[^"]*"' | cut -d'"' -f 2 | xargs | sed 's/ /\\|/g')

		if [ "" != "$library_dependencies" ]; then
			grep "\(${library_dependencies}\)" .redeploy/bnd_list.txt | dirnames >> .includes_transitive
		fi

		mv .includes .includes_old
		cat .includes_old .includes_transitive | sort -u > .includes
		rm .includes_old

		new_count=$(cat .includes | grep -c '^')
	done

	rm -f .includes_transitive
}

setopts

cachenpm $@