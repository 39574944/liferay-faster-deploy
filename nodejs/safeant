#!/bin/bash

fixdefaults() {
	local PUBLIC_PACKAGE_JSON=$(git ls-files modules | grep -F package.json | grep -vF '/src/' | grep -c '^')
	local PUBLIC_PACKAGE_LOCK_JSON=$(git ls-files modules | grep -F package-lock.json | grep -vF '/src/' | grep -c '^')

	local PRIVATE_PACKAGE_JSON=0
	local PRIVATE_PACKAGE_LOCK_JSON=0

	if [ -f git-commit-portal ]; then
		PRIVATE_PACKAGE_JSON=${PUBLIC_PACKAGE_JSON}
		PRIVATE_PACKAGE_LOCK_JSON=${PUBLIC_PACKAGE_LOCK_JSON}

		PUBLIC_PACKAGE_JSON=$(git ls-tree -r --name-only $(cat git-commit-portal) -- modules | grep -F package.json | grep -vF '/src/' | grep -c '^')
		PUBLIC_PACKAGE_LOCK_JSON=$(git ls-tree -r $(cat git-commit-portal) -- modules | grep -F package-lock.json | grep -vF '/src/' | grep -c '^')
	fi

	if [[ $(expr ${PUBLIC_PACKAGE_JSON} '+' ${PRIVATE_PACKAGE_JSON}) -ne $(expr ${PUBLIC_PACKAGE_LOCK_JSON} '+' ${PRIVATE_PACKAGE_LOCK_JSON}) ]]; then
		sed -i.bak '/com.liferay.gradle.plugins.defaults/s/version: "[^"]*"/version: "5.3.29"/' modules/build-buildscript.gradle
	fi
}

safeant() {
	GIT_ROOT=

	setopts

	if [ "" == "$GIT_ROOT" ]; then
		echo "Unable to detect git root"
		return 1
	fi

	. $(dirname ${BASH_SOURCE[0]})/../appserverprops

	if [ -d "$GIT_ROOT/../liferay-binaries-cache-2017/.git" ]; then
		pushd "$GIT_ROOT/../liferay-binaries-cache-2017" > /dev/null
		git clean -xdf
		git reset --hard
		popd > /dev/null
	elif [ -d "$GIT_ROOT/../liferay-binaries-cache-2017" ]; then
		echo 'Re-cloning liferay-binaries-cache-2017 because it is not a valid git repository'
		pushd "$GIT_ROOT/.." > /dev/null
		rm -rf liferay-binaries-cache-2017
		git clone git@github.com:liferay/liferay-binaries-cache-2017.git
		popd > /dev/null
	fi

	pushd $GIT_ROOT > /dev/null

	fixdefaults

	# Record the start time

	echo "Started $(date)" | tee $GIT_ROOT/.redeploy/compile.txt

	# Building older tags might not work due to version range
	# dependencies and the corresponding bnd.bnd

	if [ -f modules/build.gradle ]; then
		$(dirname ${BASH_SOURCE[0]})/../fixbnd
	fi

	# Improve build consistency by removing items that
	# are not needed from the build and not using the CDN

	if [ "all" == "$1" ] && [ -d modules ]; then
		$(dirname ${BASH_SOURCE[0]})/../skipmp
		$(dirname ${BASH_SOURCE[0]})/cachenpm

		git update-index --assume-unchanged build-common.xml
		sed -i.bak 's@<arg value="--no-daemon" />$@<arg value="--no-daemon" /><arg value="-Drepository.url=http://repository.liferay.com/nexus/content/groups/public" />@' build-common.xml

		if [ "" != "$(git ls-files | grep '.\(gradle\|properties\)$' | xargs grep -Fl cdn.lfrs.sl)" ]; then
			GRADLE_ARGS="$GRADLE_ARGS --no-daemon -Drepository.url=http://repository.liferay.com/nexus/content/groups/public"

			git ls-files | grep '.\(gradle\|properties\)$' | xargs grep -Fl cdn.lfrs.sl | xargs git update-index --assume-unchanged
			git ls-files | grep '.\(gradle\|properties\)$' | xargs grep -Fl cdn.lfrs.sl | xargs sed -i.bak 's@https://cdn.lfrs.sl/@http://@g'
		fi
	fi

	popd > /dev/null

	local IS_SNAPSHOT=

	if [ "${GIT_ROOT}" != "${PWD}" ]; then
		for ARG in $@; do
			if [ "install-portal-snapshot" == "${ARG}" ]; then
				IS_SNAPSHOT=true
			fi
		done
	fi

	# Execute the actual build

	if [ "" == "${IS_SNAPSHOT}" ]; then
		pushd ${GIT_ROOT} > /dev/null
		git ls-files | grep -vF modules | grep -F bnd.bnd | xargs rm -f
		popd > /dev/null
	fi

	ANT_OPTS="$ANT_OPTS" ant $@ | tee -a $GIT_ROOT/.redeploy/compile.txt

	if [ "" == "${IS_SNAPSHOT}" ]; then
		pushd ${GIT_ROOT} > /dev/null
		git ls-files | grep -vF modules | grep -F bnd.bnd | xargs git checkout
		popd > /dev/null
	fi

	# Report the completion time

	echo "Completed $(date)" | tee -a $GIT_ROOT/.redeploy/compile.txt
}

setopts() {
	. $(dirname ${BASH_SOURCE[0]})/../setopts
}

time safeant $@