#!/bin/bash

modulecache() {
	if [ -f /usr/bin/md5sum ]; then
		MD5SUM=/usr/bin/md5sum
	elif [ -f /sbin/md5 ]; then
		MD5SUM="/sbin/md5 -r"
	else
		echo "Unable to compute MD5 checksums"
		return 1
	fi

	cat /dev/null > ${cache_home}/cachenpm.tmp

	for folder in $(cat ${cache_home}/cachenpm.txt | dirnames); do
		local cache_hash=$(jq '.dependencies, .devDependencies' $folder/package.json | $MD5SUM | cut -d' ' -f 1)
		local cache_file="${cache_home}/${cache_hash}.tar.gz"

		pushd $folder > /dev/null

		if [ -f "$cache_file" ]; then
			modulerestoreonce $cache_file
		else
			echo "$folder/package.json" >> ${cache_home}/cachenpm.tmp
		fi

		popd > /dev/null
	done

	rm ${cache_home}/cachenpm.txt
	mv ${cache_home}/cachenpm.tmp ${cache_home}/cachenpm.txt

	if [[ 0 -ne $(grep -c '^' ${cache_home}/cachenpm.txt) ]]; then
		modulerun
	fi

	for folder in $(cat ${cache_home}/cachenpm.txt | dirnames); do
		local cache_hash=$(jq '.dependencies, .devDependencies' $folder/package.json | $MD5SUM | cut -d' ' -f 1)
		local cache_file="${cache_home}/${cache_hash}.tar.gz"

		pushd $folder > /dev/null

		modulecacheonce $cache_file

		popd > /dev/null
	done
}

modulecacheonce() {
	local cache_file=$1

	if [ ! -f $cache_file ]; then
		echo "Caching build for $folder"

		if [[ 0 -ne $(ls node_modules/ | grep -c '^') ]]; then
			tar -czf "$cache_file" node_modules
		fi
	fi

	if [ -f "$cache_file" ]; then
		cache_time=$(perl -MPOSIX -e 'print POSIX::strftime "%Y%m%d%H%M.%S", localtime((stat $ARGV[0])[9])' "$cache_file")
		touch -t $cache_time node_modules
	fi
}

modulerestoreonce() {
	local cache_file=$1
	local cache_time=$(perl -MPOSIX -e 'print POSIX::strftime "%Y%m%d%H%M.%S", localtime((stat $ARGV[0])[9])' "${cache_file}")
	local folder_time=

	if [ -d "node_modules" ]; then
		folder_time=$(perl -MPOSIX -e 'print POSIX::strftime "%Y%m%d%H%M.%S", localtime((stat $ARGV[0])[9])' node_modules)
	fi

	if [ "$cache_time" == "$folder_time" ]; then
		return 0
	fi

	echo "Restoring cache for $folder"

	rm -rf node_modules
	tar -zxf "${cache_file}"
	touch -t $cache_time node_modules
}

modulerun() {
	. $(dirname ${BASH_SOURCE[0]})/modulerun
}

modulecache