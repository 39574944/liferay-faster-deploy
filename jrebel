#!/bin/bash

dirnames() {
	python $(dirname "${BASH_SOURCE[0]}")/dirnames.py
}

jrebel() {
	local SCRIPT_FOLDER=$(dirname "${BASH_SOURCE[0]}")

	. $(dirname "${BASH_SOURCE[0]}")/appserverprops

	if [ "" == "$LIFERAY_HOME" ]; then
		return 1
	fi

	pushd $GIT_ROOT > /dev/null

	local TOMCAT_VERSION=

	if [ -f app.server.$USER.properties ]; then
		TOMCAT_VERSION=$(grep -F app.server.tomcat.version= app.server.$USER.properties | cut -d'=' -f 2)
	fi

	if [ "" == "$TOMCAT_VERSION" ]; then
		TOMCAT_VERSION=$(grep -F app.server.tomcat.version= app.server.properties | cut -d'=' -f 2)
	fi

	local TOMCAT_FOLDER=tomcat-${TOMCAT_VERSION}

	echo "Considering ant setup-jrebel..."

	if [ ! -f $LIFERAY_HOME/$TOMCAT_FOLDER/webapps/ROOT/WEB-INF/classes/rebel.xml ] || [ ! -f $LIFERAY_HOME/$TOMCAT_FOLDER/lib/ext/rebel.xml ]; then
		echo $LIFERAY_HOME/$TOMCAT_FOLDER/webapps/ROOT/WEB-INF/classes/rebel.xml
		echo $LIFERAY_HOME/$TOMCAT_FOLDER/lib/ext/rebel.xml
		ant setup-jrebel
	fi

	local BND_LIST=$(git ls-files modules | grep bnd.bnd)

	echo "Processing static and core modules..."

	for folder in core static; do
		BASE_PATH=$LIFERAY_HOME/osgi/$folder

		for file in $(ls -1 $BASE_PATH); do
			BUNDLE_SYMBOLICNAME=$(echo $file | sed 's/.jar$//g')

			BND_MATCHES=$(echo "$BND_LIST" | xargs grep -l ": .*${BUNDLE_SYMBOLICNAME}$" | dirnames)

			for bnd_match in $BND_MATCHES; do
				JAR_PATH=$BASE_PATH/$file
				MODULE_PATH="$PWD/$bnd_match"

				old_timestamp=

				if [ -d $MODULE_PATH/classes ]; then
					old_timestamp=$(perl -MPOSIX -e 'print POSIX::strftime "%Y%m%d%H%M.%S", localtime((stat $ARGV[0])[9])' "$MODULE_PATH/classes")
				fi

				new_timestamp=$(perl -MPOSIX -e 'print POSIX::strftime "%Y%m%d%H%M.%S", localtime((stat $ARGV[0])[9])' "$JAR_PATH")

				if [ "$old_timestamp" == "$new_timestamp" ]; then
					continue
				fi

				RESOURCE_PATH="$MODULE_PATH/src/main/resources"

				mkdir -p $RESOURCE_PATH

				if [ -d "$RESOURCE_PATH/META-INF/resources" ]; then
					cp -f "$SCRIPT_FOLDER/jrebel-web.xml" "$RESOURCE_PATH/rebel.xml"
				else
					cp -f "$SCRIPT_FOLDER/jrebel.xml" "$RESOURCE_PATH/rebel.xml"
				fi

				sed -i.bak "s@MODULE_CLASSES@${MODULE_PATH}/classes@g" "$RESOURCE_PATH/rebel.xml"
				sed -i.bak "s@MODULE_RESOURCES@${RESOURCE_PATH}/META-INF/resources@g" "$RESOURCE_PATH/rebel.xml"

				rm -f "$RESOURCE_PATH/rebel.xml.bak"

				zip -ujqq "${JAR_PATH}" "${RESOURCE_PATH}/rebel.xml"

				rm -rf $MODULE_PATH/classes
				mkdir -p $MODULE_PATH/classes

				pushd $MODULE_PATH/classes > /dev/null
				unzip -qq "${JAR_PATH}"
				popd > /dev/null

				touch -t $new_timestamp "$MODULE_PATH/classes"
			done
		done
	done

	popd > /dev/null
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/setopts
}

setopts && jrebel