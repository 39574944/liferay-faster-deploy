#!/bin/bash

checksnapshots() {
	. $(dirname "${BASH_SOURCE[0]}")/checksnapshots
}

findgradle() {
	if [ -e $GRADLE_HOME/gradlew ]; then
		return 0
	fi

	GRADLE_HOME=$PWD

	while [ ! -e $GRADLE_HOME/gradlew ] && [ "/" != "$GRADLE_HOME" ]; do
		GRADLE_HOME=$(dirname $GRADLE_HOME)
	done

	if [ -e $GRADLE_HOME/gradlew ]; then
		return 0
	fi

	echo 'Unable to find the gradlew binary'

	if [ "" != "$(which gradle)" ]; then
		echo "Falling back to gradle on the path: $(which gradle)"
		return 0
	fi

	return 1
}

fixgradle() {
	# if this is a blade workspace or a subrepo, don't do anything

	if [ -f $GRADLE_HOME/build.gradle ]; then
		if [ "" != "$(git ls-files -v | grep '^h ' | cut -d' ' -f 2 | grep -F 'settings.gradle')" ]; then
			git ls-files -v | grep '^h ' | cut -d' ' -f 2 | grep -F 'settings.gradle' | xargs git checkout
		fi

		return 0
	fi

	if [ -f $GIT_ROOT/build.gradle ]; then
		if [ "" != "$(git ls-files -v | grep '^h ' | cut -d' ' -f 2 | grep -F 'settings.gradle')" ]; then
			git ls-files -v | grep '^h ' | cut -d' ' -f 2 | grep -F 'settings.gradle' | xargs git checkout
		fi

		return 0
	fi

	# a settings.gradle in the parent folder can mess us up

	if [ -f ../settings.gradle ]; then
		rm ../settings.gradle
		python -c "from __future__ import print_function; import os.path; print('%s/settings.gradle' % os.path.relpath('$(dirname $PWD)', '$GIT_ROOT'))" > $GIT_ROOT/.redeploy/gwchanges.txt
	fi

	# if you appear to be building to a Liferay downloaded bundle rather
	# than a built bundle, tell the user to use the override folder

	if [ -d "$LIFERAY_HOME/osgi/marketplace" ] && [[ 0 -ne $(ls -1 $LIFERAY_HOME/osgi/marketplace | grep -F .lpkg | wc -l) ]]; then
		local OVERRIDE=$LIFERAY_HOME/osgi/marketplace/override

		if [ "" == "$(grep -F "$OVERRIDE" build.gradle)" ]; then
			echo "If you are absolutely sure you want to deploy to a release bundle with .lpkg files"
			echo "(not recommended, because this may require a server restart after every deploy)"
			echo "please add the following to build.gradle:"
			echo -e "\n\njar.archiveName = \"$JAR_NAME\"\n\nliferay {\n\tdeployDir = \"$OVERRIDE\"\n}"
			return 0
		fi
	fi

	# if we have a "default" dependency, make sure we have the snapshot in the .m2 cache

	local NEEDED_ARTIFACTS=$(grep -F '"com.liferay.portal"' build.gradle | grep -F '"default"' | grep -o 'name: "[^"]*"' | cut -d'"' -f 2)

	if [ "" != "$NEEDED_ARTIFACTS" ]; then
		checksnapshots
	fi

	# if we are missing util-taglib.jar, some Gradle tasks will fail

	local TOMCAT_VERSION=

	if [ -f $GIT_ROOT/app.server.$USER.properties ]; then
		TOMCAT_VERSION=$(grep -F app.server.tomcat.version= $GIT_ROOT/app.server.$USER.properties | cut -d'=' -f 2)
	fi

	if [ "" == "$TOMCAT_VERSION" ]; then
		TOMCAT_VERSION=$(grep -F app.server.tomcat.version= $GIT_ROOT/app.server.properties | cut -d'=' -f 2)
	fi

	if [ ! -f $LIFERAY_HOME/tomcat-$TOMCAT_VERSION/webapps/ROOT/WEB-INF/lib/util-taglib.jar ]; then
		checksnapshots

		cd $GIT_ROOT/util-taglib
		ant deploy
		cd -
	fi

	return 1
}

gw() {
	findgradle

	if [[ 0 -ne $? ]]; then
		return 1
	fi

	. $(dirname "${BASH_SOURCE[0]}")/appserverprops

	if [[ 0 -ne $? ]]; then
		return 1
	fi

	# avoid using the CDN, because it's not reliable

	local GRADLE_ARGS="--stacktrace"

	if [ "" != "$(git ls-files | grep '.\(gradle\|properties\)$' | xargs grep -Fl cdn.lfrs.sl)" ]; then
		GRADLE_ARGS="$GRADLE_ARGS --no-daemon -Drepository.url=http://repository.liferay.com/nexus/content/groups/public"

		pushd $GIT_ROOT > /dev/null
		git ls-files | grep '.\(gradle\|properties\)$' | xargs grep -Fl cdn.lfrs.sl | tee -a $GIT_ROOT/.redeploy/gwchanges.txt | xargs sed -i.bak 's@https://cdn.lfrs.sl/@http://@g'
		popd > /dev/null
	fi

	# run the gradlew binary, making sure to set GRADLE_OPTS if
	# it is not yet set

	if [ -f $GRADLE_HOME/gradlew ]; then
		fixgradle

		$GRADLE_HOME/gradlew $GRADLE_ARGS $@

		local EXIT_CODE=$?

		return $EXIT_CODE
	else
		gradle $GRADLE_ARGS $@

		return $?
	fi
}

javahome() {
	. $(dirname "${BASH_SOURCE[0]}")/javahome $@
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/setopts
}

if [ ! -f build.gradle ]; then
	echo "No build.gradle found"
	exit 0
fi

setopts

if [[ 8 -gt $JAVA_VERSION ]]; then
	javahome 8
	setopts
fi

mkdir -p $GIT_ROOT/.redeploy

cat /dev/null > $GIT_ROOT/.redeploy/gwchanges.txt

gw $@

EXIT_CODE=$?

if [[ 0 -ne $(cat $GIT_ROOT/.redeploy/gwchanges.txt | wc -l) ]]; then
	pushd $GIT_ROOT > /dev/null
	cat $GIT_ROOT/.redeploy/gwchanges.txt | xargs git checkout
	popd > /dev/null
fi


exit $EXIT_CODE