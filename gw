#!/bin/bash

findgradle() {
	GRADLE_HOME=$PWD

	while [ ! -e $GRADLE_HOME/gradlew ] && [ "/" != "$GRADLE_HOME" ]; do
		GRADLE_HOME=$(dirname $GRADLE_HOME)
	done

	if [ ! -e $GRADLE_HOME/gradlew ]; then
		echo 'Unable to find the gradlew binary'
		return 1
	fi
}

fixgradle() {
	# If this is a blade workspace, don't do anything

	if [ -f $GRADLE_HOME/build.gradle ]; then
		return 0
	fi

	# a settings.gradle in the parent folder can mess us up

	if [ -f ../settings.gradle ] && [ ! -f ../gradlew ]; then
		rm ../settings.gradle
		git update-index --assume-unchanged ../settings.gradle
	fi

	. $(dirname "${BASH_SOURCE[0]}")/appserverprops

	# if you appear to be building to a Liferay downloaded bundle rather
	# than a built bundle, tell the user to use the override folder

	if [ -d "$LIFERAY_HOME/osgi/marketplace" ] && [[ 0 -ne $(ls -1 $LIFERAY_HOME/osgi/marketplace | grep -F .lpkg | wc -l) ]]; then
		if [ "" == "$(grep -F "$OVERRIDE" build.gradle)" ]; then
			echo "If you are absolutely sure you want to deploy to a release bundle with .lpkg files"
			echo "(not recommended, because this may require a server restart after every deploy)"
			echo "please add the following to build.gradle:"
			echo -e "\n\njar.archiveName = \"$JAR_NAME\"\n\nliferay {\n\tdeployDir = \"$OVERRIDE\"\n}"
			return 1
		fi
	fi

	# if we have a "default" dependency, make sure we have the snapshot in the .m2 cache

	local NEEDED_ARTIFACTS=$(grep -F '"com.liferay.portal"' build.gradle | grep -F '"default"' | grep -o 'name: "[^"]*"' | cut -d'"' -f 2)

	if [ "" != "$NEEDED_ARTIFACTS" ]; then
		for artifact in $NEEDED_ARTIFACTS; do
			artifact_version=$(grep -F "${artifact}.version" $GRADLE_HOME/.gradle/gradle.properties | cut -d'=' -f 2)

			if [ ! -d "${HOME}/.m2/repository/com/liferay/portal/${artifact}/${artifact_version}" ]; then
				pushd $GRADLE_HOME > /dev/null
				ant start install-portal-snapshots
				popd > /dev/null
			fi
		done
	fi
}

gw() {
	findgradle

	if [[ 0 -ne $? ]]; then
		return 1
	fi

	if [ "formatSource" != "$1" ]; then
		fixgradle

		if [[ 0 -ne $? ]]; then
			return 1
		fi
	fi

	# run the gradlew binary, making sure to set GRADLE_OPTS if
	# it is not yet set

	if [ -f $GRADLE_HOME/gradlew ]; then
		$GRADLE_HOME/gradlew $@

		local EXIT_CODE=$?

		git checkout ../settings.gradle

		return $EXIT_CODE
	fi
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/setopts
}

setopts && gw $@