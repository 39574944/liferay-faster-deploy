#!/bin/bash

checkcommonerrors() {
	local PATCHER_JSON=$(dirname "${BASH_SOURCE[0]}")/patcher.json
	local BASELINE_ID=$(cat $PATCHER_JSON | jq '.["'$BASE_TAG'"]')

	if [ "" == "$BASELINE_ID" ]; then
		echo $BASE_TAG does not correspond to a known patcher portal baseline
		return 1
	fi

	for TAG in $(cat $PATCHER_JSON | jq 'keys | .[]' | cut -d'"' -f 2 | grep -vF '.x'); do
		if [ "" == "$(git for-each-ref --format='%(refname)' refs/tags/$TAG)" ]; then
			git fetch --no-tags git@github.com:liferay/liferay-portal-ee.git tags/$TAG:refs/tags/$TAG
		fi
	done

	# Make sure that we have not modified any packageinfo files

	git diff --name-only $BASE_TAG..HEAD > $GIT_ROOT/.redeploy/patcher_diff.txt

	if [ "" != "$(grep -F git-commit-portal $GIT_ROOT/.redeploy/patcher_diff.txt)" ]; then
		echo "A fix must not change git-commit-portal*"
		echo "$CHANGED_PACKAGEINFO"
		return 1
	fi

	local CHANGED_PACKAGEINFO=$(grep -F '/packageinfo' $GIT_ROOT/.redeploy/patcher_diff.txt)

	if [ "" != "$CHANGED_PACKAGEINFO" ]; then
		echo ""
		echo "A fix must not change packageinfo"

		for file in $CHANGED_PACKAGEINFO; do
			echo ""
			echo "$file"
			git log --pretty='   %C(yellow)%H%Creset %Cgreen%ci%Creset %s' $BASE_TAG..HEAD -- $file
		done
	fi

	# Make sure that we have not modified any Bundle-Version values

	local CHANGED_BND=$(grep -F '/bnd.bnd' $GIT_ROOT/.redeploy/patcher_diff.txt)
	local MODIFIED_BUNDLE_VERSION=

	for file in $CHANGED_BND; do
		if [ "" != "$(git diff $BASE_TAG..HEAD -- $file | grep -F Bundle-Version)" ]; then
			MODIFIED_BUNDLE_VERSION="$MODIFIED_BUNDLE_VERSION $file"
		fi
	done

	if [ "" != "$MODIFIED_BUNDLE_VERSION" ]; then
		echo ""
		echo "A fix must not modify a Bundle-Version: $file"

		for file in $CHANGED_PACKAGEINFO; do
			echo ""
			echo "$file"
			git log --pretty='   %C(yellow)%H%Creset %Cgreen%ci%Creset %s' $BASE_TAG..HEAD -- $file
		done
	fi

	# If any of the checks failed, abort

	if [ "" != "$CHANGED_PACKAGEINFO" ] || [ "" != "$MODIFIED_BUNDLE_VERSION" ]; then
		echo ""
		return 1
	fi
}

patcher() {
	. $(dirname "${BASH_SOURCE[0]}")/../setopts
	. $(dirname "${BASH_SOURCE[0]}")/../getparent

	if [ "" == "$BASE_TAG" ]; then
		echo Could not identify baseline.
		return 1
	fi

	if ! checkcommonerrors; then
		return 1
	fi

	# Check if there's a pre-existing patch in patcher portal

	local ORIGIN=$(git remote -v | grep liferay-portal-ee | grep -vF ':liferay/' | cut -f 2 | cut -d' ' -f 1 | uniq)

	if [ "" == "$(git for-each-ref --format='%(refname)' refs/$ORIGIN/$BRANCH)" ]; then
		git push $ORIGIN $BRANCH
	elif [ "" != "$(git log --pretty='%H' $ORIGIN/$BRANCH..$BRANCH)" ]; then
		git push -f $ORIGIN $BRANCH
	fi

	python "$(dirname ${BASH_SOURCE[0]})/patcher.py" "${ORIGIN}" "$1"
}

if [ "" == "$(git config files.username)" ] || [ "" == "$(git config files.password)" ]; then
	echo "Cannot access patcher portal unless files.username and files.password are set with git config --global"
	exit 1
fi

patcher $@