#!/bin/bash

patcher() {
	. $(dirname "${BASH_SOURCE[0]}")/../getparent

	if [ "" == "$BASE_TAG" ]; then
		echo Could not identify baseline.
		return 1
	fi

	local PATCHER_JSON=$(dirname "${BASH_SOURCE[0]}")/patcher.json

	local BASELINE_ID=$(cat $PATCHER_JSON | jq '.["'$BASE_TAG'"]')

	if [ "" == "$BASELINE_ID" ]; then
		echo $BASE_TAG does not correspond to a known patcher portal baseline
		return 1
	fi

	local UPSTREAM=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/upstream[^/]*/ee-${BASE_BRANCH}$" | cut -d'/' -f 3)

	for TAG in $(cat $PATCHER_JSON | jq 'keys | .[]' | cut -d'"' -f 2); do
		if [ "" == "$(git for-each-ref --format='%(refname)' refs/tags/$TAG)" ]; then
			echo git fetch --no-tags $UPSTREAM tags/$TAG:refs/tags/$TAG
		fi
	done

	# Make sure that we have not modified any packageinfo files

	git diff --name-only $BASE_TAG..HEAD > $GIT_ROOT/.redeploy/patcher_diff.txt

	if [ "" != "$(grep -F git-commit-portal $GIT_ROOT/.redeploy/patcher_diff.txt)" ]; then
		echo "A fix must not change git-commit-portal*"
		echo "$CHANGED_PACKAGEINFO"
		return 1
	fi

	local CHANGED_PACKAGEINFO=$(grep -F '/packageinfo' $GIT_ROOT/.redeploy/patcher_diff.txt)

	if [ "" != "$CHANGED_PACKAGEINFO" ]; then
		echo ""
		echo "A fix must not change packageinfo"

		for file in $CHANGED_PACKAGEINFO; do
			echo ""
			echo "$file"
			git log --pretty='   %C(yellow)%H%Creset %Cgreen%ci%Creset %s' $BASE_TAG..HEAD -- $file
		done
	fi

	# Make sure that we have not modified any Bundle-Version values

	local CHANGED_BND=$(grep -F '/bnd.bnd' $GIT_ROOT/.redeploy/patcher_diff.txt)
	local MODIFIED_BUNDLE_VERSION=

	for file in $CHANGED_BND; do
		if [ "" != "$(git diff $BASE_TAG..HEAD -- $file | grep -F Bundle-Version | grep -F '+')" ]; then
			MODIFIED_BUNDLE_VERSION="$MODIFIED_BUNDLE_VERSION $file"
		fi
	done

	if [ "" != "$MODIFIED_BUNDLE_VERSION" ]; then
		echo ""
		echo "A fix must not modify a Bundle-Version: $file"

		for file in $CHANGED_PACKAGEINFO; do
			echo ""
			echo "$file"
			git log --pretty='   %C(yellow)%H%Creset %Cgreen%ci%Creset %s' $BASE_TAG..HEAD -- $file
		done
	fi

	# If any of the checks failed, abort

	if [ "" != "$CHANGED_PACKAGEINFO" ] || [ "" != "$MODIFIED_BUNDLE_VERSION" ]; then
		echo ""
		return 1
	fi

	# All pre-checks complete, launch a web browser

	local BASE_URL=https://patcher.liferay.com/group/guest/patching/-/osb_patcher/fixes/create
	local BRANCH=$(git symbolic-ref --short HEAD)
	local PATCHER_FIX_NAME=$(echo $BRANCH | grep -o "LP[EPS]-[0-9]*")
	local ORIGIN=$(git remote -v | grep liferay-portal-ee | grep -vF ':liferay/' | cut -f 2 | cut -d' ' -f 1 | uniq)

	if [ "" == "$(git for-each-ref --format='%(refname)' refs/$ORIGIN/$BRANCH)" ]; then
		git push $ORIGIN $BRANCH
	elif [ "" != "$(git log --pretty='%H' $ORIGIN/$BRANCH..$BRANCH)" ]; then
		git push -f $ORIGIN $BRANCH
	fi

	NS=_1_WAR_osbpatcherportlet_

	if [[ "$BASE_TAG" == fix-pack-base-6130* ]] || [[ "$BASE_TAG" == fix-pack-base-6210* ]]; then
		PRODUCT_VERSION=1
	else
		PRODUCT_VERSION=2
	fi

	python -m webbrowser "${BASE_URL}?${NS}productVersion=${PRODUCT_VERSION}&${NS}patcherProjectVersionId=${BASELINE_ID}&${NS}committish=${BRANCH}&${NS}patcherFixName=${PATCHER_FIX_NAME}&${NS}gitRemoteURL=$ORIGIN" &
}

patcher