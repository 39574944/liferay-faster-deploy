#!/bin/bash

backport() {
	if [ "" == "$1" ]; then
		echo "Please specify a ticket to backport"
		return 1
	fi

	# Make sure we have the right folders and environment variables set

	if [ ! -d $PWD/modules ]; then
		echo "$PWD does not appear to be an ee-7.0.x repository"
		return 1
	fi

	# Make sure we're on the master branch to identify the subrepos

	upstream_remote=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/upstream[^/]*/master$" | cut -d'/' -f 3)

	git fetch ${upstream_remote} master --no-tags

	git checkout $(git log -1 --pretty='%H' ${upstream_remote}/master)

	if [[ 0 -ne $? ]]; then
		return 1
	fi

	SUBREPO_ROOT=$SUBREPO_ROOT $(dirname ${BASH_SOURCE[0]})/../github/subrepos

	if [[ 0 -ne $? ]]; then
		return 1
	fi

	# Switch to ee-7.0.x so that we can see what repositories are in push mode
	# for pulling in changes

	upstream_remote=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/upstream[^/]*/ee-7.0.x$" | cut -d'/' -f 3)

	git fetch ${upstream_remote} ee-7.0.x --no-tags

	git checkout $(git log -1 --pretty='%H' ${upstream_remote}/ee-7.0.x)

	if [[ 0 -ne $? ]]; then
		return 1
	fi

	git ls-files modules | grep -F gradle.properties > $GIT_ROOT/.redeploy/gradleprops.txt

	counter=0

	PORTAL_SOURCE_70X=$PWD

	for folder in $(ls -1 $SUBREPO_ROOT); do
		if [ ! -f $SUBREPO_ROOT/$folder/gradle.properties ]; then
			continue
		fi

		# Determine the module path in the ee-7.0.x repository

		local PROJECT_PATH_PREFIX=$(grep 'project.path.prefix=' $SUBREPO_ROOT/$folder/gradle.properties)

		if [ "" == "$PROJECT_PATH_PREFIX" ]; then
			echo "Unable to find project path for $folder"
			continue
		fi

		local GRADLE_PROPS=$(cat $GIT_ROOT/.redeploy/gradleprops.txt | xargs grep -l "$PROJECT_PATH_PREFIX$")

		if [ "" == "$GRADLE_PROPS" ]; then
			continue
		fi

		local MODULE_PATH=$(dirname $GRADLE_PROPS)

		if [ ! -f $MODULE_PATH/.gitrepo ] || [ "" != "$(grep 'mode = pull' $MODULE_PATH/.gitrepo)" ]; then
			continue
		fi

		pushd $SUBREPO_ROOT/$folder > /dev/null

		echo "Checking for changes in $SUBREPO_ROOT/$folder"
		subrepobpr $@

		popd > /dev/null
	done

	# Apply the patch files if possible

	local EXIT_CODE=1

	if [ "" != "$(git rev-parse --verify $1-70x 2> /dev/null)" ]; then
		git checkout $1-70x
	else
		git checkout -b $1-70x

		if [[ 0 -ne $? ]]; then
			return 1
		fi
	fi

	set -o pipefail
	ls -1 *.patch | sort | xargs git am
	EXIT_CODE=$?
	set +o pipefail

	if [[ 0 -ne $EXIT_CODE ]]; then
		echo "Failed to automatically apply patches, aborting"
		git am --abort
	else
		rm *.patch
	fi
}

subrepobpr() {
	# Generate the patch files

	local HAS_COMMITS=
	LOG_SEARCH=$(echo "$@" | sed 's@ @\\|@g' | awk '{ print "\\(" $1 "\\)\\( \\|$\\)" }')

	git fetch upstream master --no-tags

	for commit in $(git log upstream/master --pretty='%H' --grep "$LOG_SEARCH" | tac); do
		HAS_COMMITS=true

		for patch in $(git format-patch $commit -1); do
			counter=$(expr $counter '+' 1)
			prefix=$(printf "%04d" $counter)

			mv $patch $prefix-$1.patch
		done

		sed -i.bak "s@^--- a/@--- a/$MODULE_PATH/@g" $prefix-$1.patch
		sed -i.bak "s@^+++ b/@+++ b/$MODULE_PATH/@g" $prefix-$1.patch
	done

	if [ "" != "$HAS_COMMITS" ]; then
		rm -f *.bak
		mv *.patch "$PORTAL_SOURCE_70X"
	fi
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/../setopts
}

tac() {
	if [ "" != "$(which tac)" ]; then
		$(which tac) $@
	else
		tail -r $@
	fi
}

setopts

backport $@