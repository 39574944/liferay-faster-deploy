#!/bin/bash

appserverprops() {
	if [ ! -f $GIT_ROOT/app.server.$USER.properties ]; then
		echo "Missing $GIT_ROOT/app.server.$USER.properties"
		return 1
	fi
}

buildprops() {
	# Disable the baseline report unless it's explicitly requested

	echo 'baseline.jar.report.level=off' > $GIT_ROOT/build.$USER.properties

	# If we're on an older CentOS server, we can't use the node.js SASS compiler

	if [ "" != "$(which rpm)" ]; then
		echo 'sass.compiler.class.name=ruby' >> $GIT_ROOT/build.$USER.properties
	fi

	# Avoid using ECJ for compilation

	echo 'javac.compiler=modern' >> $GIT_ROOT/build.$USER.properties

	# Make sure the repository password is up to date

	local UPSTREAM_BRANCH=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/upstream[^/]*/ee-7.0.x$" | cut -d'/' -f 3,4)

	git show ${UPSTREAM_BRANCH}:build.properties | grep repository.private.password= >> $GIT_ROOT/build.$USER.properties
}

cleanappserver() {
	if [ "" == "$ARCHIVE_HOME" ]; then
		return 0
	fi

	mkdir -p $ARCHIVE_HOME

	local TOMCAT_VERSION=

	if [ -f $GIT_ROOT/app.server.$USER.properties ]; then
		TOMCAT_VERSION=$(grep -F app.server.tomcat.version= $GIT_ROOT/app.server.$USER.properties | cut -d'=' -f 2)
	fi

	if [ "" == "$TOMCAT_VERSION" ]; then
		TOMCAT_VERSION=$(grep -F app.server.tomcat.version= $GIT_ROOT/app.server.properties | cut -d'=' -f 2)
	fi

	local TOMCAT_MAJOR_VERSION=$(echo $TOMCAT_VERSION | cut -d'.' -f 1)

	# make sure we have an archive file

	ARCHIVE_FILE=${ARCHIVE_HOME}/apache-tomcat-${TOMCAT_VERSION}.tar.gz

	if [ ! -f "$ARCHIVE_FILE" ]; then
		pushd $ARCHIVE_HOME > /dev/null
		curl -O "http://archive.apache.org/dist/tomcat/tomcat-${TOMCAT_MAJOR_VERSION}/v${TOMCAT_VERSION}/bin/apache-tomcat-${TOMCAT_VERSION}.tar.gz"
		popd > /dev/null
	fi

	# cleanup the existing folder so that we can have a clean slate

	local TOMCAT_FOLDER=tomcat-${TOMCAT_VERSION}

	rm -rf "$LIFERAY_HOME/$TOMCAT_FOLDER"
	mkdir -p "$LIFERAY_HOME"

	pushd "$LIFERAY_HOME" > /dev/null

	tar -zxf "$ARCHIVE_FILE"
	mv apache-tomcat-${TOMCAT_VERSION} $TOMCAT_FOLDER
	rm -rf $TOMCAT_FOLDER/webapps/*

	# setup catalina.properties

	if [ "7" -lt "$TOMCAT_MAJOR_VERSION" ]; then
		sed -i 's#common.loader=#common.loader="${catalina.base}/lib/ext/*.jar",#g' $TOMCAT_FOLDER/conf/catalina.properties
	else
		sed -i 's#common.loader=#common.loader=${catalina.base}/lib/ext/*.jar,#g' $TOMCAT_FOLDER/conf/catalina.properties
	fi

	popd > /dev/null
}

gradleprops() {
	local ANT_LIFERAY_HOME=

	if [ -f "$GIT_ROOT/app.server.$USER.properties" ]; then
		ANT_LIFERAY_HOME=$(grep '^\s*app.server.parent.dir=' "$GIT_ROOT/app.server.$USER.properties" | cut -d'=' -f 2)
	fi

	if [ ! -d "$GIT_ROOT/modules" ]; then
		LIFERAY_HOME=$ANT_LIFERAY_HOME
		return 0
	fi

	# Find gradle root

	GRADLE_HOME=$PWD

	while [ ! -e $GRADLE_HOME/gradlew ] && [ "/" != "$GRADLE_HOME" ]; do
		GRADLE_HOME=$(dirname $GRADLE_HOME)
	done

	if [ ! -e $GRADLE_HOME/gradlew ]; then
		echo 'Unable to find the gradlew binary'
		return 1
	fi

	# If this is a blade workspace, don't do anything

	if [ -f $GRADLE_HOME/build.gradle ]; then
		return 0
	fi

	# Make sure that we've run ant setup-sdk

	local GRADLE_LIFERAY_HOME=

	if [ -f "$GRADLE_HOME/.gradle/gradle.properties" ]; then
		GRADLE_LIFERAY_HOME=$(grep -F liferay.home= $GRADLE_HOME/.gradle/gradle.properties | cut -d'=' -f 2)
	fi

	if [ "" == "$ANT_LIFERAY_HOME" ]; then
		if [ "" == "$GRADLE_LIFERAY_HOME" ]; then
			echo "Missing app.server.$USER.properties and gradle.properties"
			return 1
		fi

		echo -e "\napp.server.parent.dir=$GRADLE_LIFERAY_HOME" >> $GIT_ROOT/app.server.$USER.properties
		ANT_LIFERAY_HOME=$GRADLE_LIFERAY_HOME
	fi

	if [ "$ANT_LIFERAY_HOME" != "$GRADLE_LIFERAY_HOME" ]; then
		if [ "" == "$GRADLE_LIFERAY_HOME" ]; then
			echo "Missing .gradle/gradle.properties, generating via ant setup-sdk"
		else
			echo "Fixing mismatch between app.server.$USER.properties and .gradle/gradle.properties via ant setup-sdk"
		fi

		pushd $GIT_ROOT > /dev/null

		ant setup-sdk
		GRADLE_LIFERAY_HOME=$ANT_LIFERAY_HOME

		popd > /dev/null
	fi

	# Update the environment variable for other scripts

	LIFERAY_HOME=$GRADLE_LIFERAY_HOME
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/setopts
}

setopts && appserverprops && buildprops && gradleprops && cleanappserver