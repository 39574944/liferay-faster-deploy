#!/bin/bash

appserveruserprops() {
	if [ ! -f "$GIT_ROOT/app.server.properties" ]; then
		return 0
	fi

	if [ ! -f "$GIT_ROOT/app.server.$USER.properties" ]; then
		echo "Missing $GIT_ROOT/app.server.$USER.properties"
		return 1
	fi

	if [[ 0 -ne $(egrep -o $'\r\n'\$ "$GIT_ROOT/app.server.$USER.properties" | wc -c ) ]]; then
		perl -pi -e 's/\r\n|\n|\r/\n/g' "$GIT_ROOT/app.server.$USER.properties"
	fi

	return 0
}

buildprops() {
	if [ ! -f $GIT_ROOT/build.xml ]; then
		return 0
	fi

	if [ -f $GIT_ROOT/build.$USER.properties ]; then
		if [[ 0 -ne $(egrep -o $'\r\n'\$ "$GIT_ROOT/build.$USER.properties" | wc -c ) ]]; then
			perl -pi -e 's/\r\n|\n|\r/\n/g' "$GIT_ROOT/build.$USER.properties"
		fi

		if [ "" == "$(grep -F baseline.jar.report.level build.${USER}.properties)" ]; then
			echo -e '\nbaseline.jar.report.level=off' >> build.${USER}.properties
		fi

		repopass

		return 0
	fi

	cat /dev/null > $GIT_ROOT/build.$USER.properties

	# If we're on an older CentOS server, we can't use the node.js SASS compiler

	if [ "" != "$(which rpm 2> /dev/null)" ]; then
		echo 'sass.compiler.class.name=ruby' >> $GIT_ROOT/build.$USER.properties
	fi

	# Avoid using ECJ for compilation

	echo 'javac.compiler=modern' >> $GIT_ROOT/build.$USER.properties

	# Make sure nodejs arguments are set

	if [ -f build.properties ]; then
		grep -F '#nodejs.npm.args' build.properties | sed 's/^\s*#//g' >> $GIT_ROOT/build.$USER.properties
	fi

	if [ "" == "$(grep -F baseline.jar.report.level build.${USER}.properties)" ]; then
		echo -e '\nbaseline.jar.report.level=off' >> build.${USER}.properties
	fi

	# Ensure we have an up-to-date repository password for private repositories

	repopass
}

cleanappserver() {
	local TOMCAT_VERSION=

	TOMCAT_FOLDER=
	CATALINA_HOME=

	if [ -f $GIT_ROOT/app.server.$USER.properties ]; then
		TOMCAT_VERSION=$(grep -F app.server.tomcat.version= $GIT_ROOT/app.server.$USER.properties | cut -d'=' -f 2)
	fi

	if [ "" == "$TOMCAT_VERSION" ] && [ -f $GIT_ROOT/app.server.properties ]; then
		TOMCAT_VERSION=$(grep -F app.server.tomcat.version= $GIT_ROOT/app.server.properties | cut -d'=' -f 2)
	fi

	if [ "" != "$TOMCAT_VERSION" ]; then
		TOMCAT_FOLDER=tomcat-${TOMCAT_VERSION}
		CATALINA_HOME=${LIFERAY_HOME}/${TOMCAT_FOLDER}
	fi

	if [ ! -d "${CATALINA_HOME}" ] && [ -d "${LIFERAY_HOME}" ]; then
		local POSSIBLE_CATALINA_HOME=$(find "${LIFERAY_HOME}" -maxdepth 1 -type d -name 'tomcat-*' | sort | tail -1)

		if [ "" != "${POSSIBLE_CATALINA_HOME}" ]; then
			echo "Expected to find ${CATALINA_HOME}, but found ${POSSIBLE_CATALINA_HOME} instead"

			CATALINA_HOME="${POSSIBLE_CATALINA_HOME}"
			TOMCAT_FOLDER=$(basename "${CATALINA_HOME}")
			TOMCAT_VERSION=$(echo "${TOMCAT_FOLDER}" | cut -d'-' -f 2-)
		fi
	fi

	if [ "" != "$CURRENT_HASH" ]; then
		return 0
	fi

	if [ ! -d ${CATALINA_HOME} ]; then
		echo "Missing ${CATALINA_HOME}"
		ant -f build-dist.xml unzip-tomcat
	fi

	if [ "" == "$ARCHIVE_HOME" ]; then
		return 0
	fi

	mkdir -p $ARCHIVE_HOME

	local TOMCAT_MAJOR_VERSION=$(echo $TOMCAT_VERSION | cut -d'.' -f 1)

	# make sure we have an archive file

	ARCHIVE_FILE=${ARCHIVE_HOME}/apache-tomcat-${TOMCAT_VERSION}.zip

	if [ ! -f "$ARCHIVE_FILE" ]; then
		pushd $ARCHIVE_HOME > /dev/null
		curl -O "http://archive.apache.org/dist/tomcat/tomcat-${TOMCAT_MAJOR_VERSION}/v${TOMCAT_VERSION}/bin/apache-tomcat-${TOMCAT_VERSION}.zip"
		popd > /dev/null
	fi

	# cleanup the existing folder so that we can have a clean slate

	rm -rf "${CATALINA_HOME}"
	mkdir -p "$LIFERAY_HOME"

	pushd "$LIFERAY_HOME" > /dev/null

	unzip "$ARCHIVE_FILE"
	mv apache-tomcat-${TOMCAT_VERSION} $TOMCAT_FOLDER
	rm -rf $TOMCAT_FOLDER/webapps/*

	# setup catalina.properties

	if [ "7" -lt "$TOMCAT_MAJOR_VERSION" ]; then
		sed -i 's#common.loader=#common.loader="${catalina.base}/lib/ext/*.jar",#g' $TOMCAT_FOLDER/conf/catalina.properties
	else
		sed -i 's#common.loader=#common.loader=${catalina.base}/lib/ext/*.jar,#g' $TOMCAT_FOLDER/conf/catalina.properties
	fi

	popd > /dev/null
}

gradleprops() {
	local ANT_LIFERAY_HOME=
	local GRADLE_LIFERAY_HOME=

	if [ -f "$GIT_ROOT/app.server.properties" ]; then
		if [ -f "$GIT_ROOT/app.server.$USER.properties" ]; then
			ANT_LIFERAY_HOME=$(grep -F 'app.server.parent.dir=' "$GIT_ROOT/app.server.$USER.properties" | grep -vF '#' | cut -d'=' -f 2)
		fi

		if [ "" == "${ANT_LIFERAY_HOME}" ]; then
			ANT_LIFERAY_HOME=$(grep -F 'app.server.parent.dir=' "$GIT_ROOT/app.server.properties" | grep -vF '#' | cut -d'=' -f 2 | sed 's@${project.dir}@'${GIT_ROOT}'@g')
			echo -e "\napp.server.parent.dir=$ANT_LIFERAY_HOME" >> app.server.$USER.properties
			return 0
		fi
	fi

	# Find gradle root

	GRADLE_HOME=$PWD

	while [ ! -e $GRADLE_HOME/gradlew ] && [ "/" != "$GRADLE_HOME" ]; do
		GRADLE_HOME=$(dirname $GRADLE_HOME)
	done

	# If this is a blade workspace, don't do anything

	if [ "/" != "$GRADLE_HOME" ] && [ -f $GRADLE_HOME/build.gradle ]; then
		return 0
	fi

	# Make sure that we've run ant setup-sdk

	local GRADLE_LIFERAY_HOME=

	if [ -f "$GRADLE_HOME/.gradle/gradle.properties" ]; then
		GRADLE_LIFERAY_HOME=$(grep -F liferay.home= $GRADLE_HOME/.gradle/gradle.properties | cut -d'=' -f 2)
	elif [ -f "$GIT_ROOT/gradle.properties" ]; then
		GRADLE_LIFERAY_HOME=$(grep -F 'liferay.home=' "$GIT_ROOT/gradle.properties" | grep -vF '#' | cut -d'=' -f 2)

		if [ "" == "$GRADLE_USER_HOME" ] && [ -f $HOME/.gradle/gradle.properties ]; then
			GRADLE_USER_HOME=$HOME/.gradle
		fi

		if [ "" == "$GRADLE_LIFERAY_HOME" ] && [ -f $GRADLE_USER_HOME/gradle.properties ]; then
			GRADLE_LIFERAY_HOME=$(grep -F 'liferay.home=' "$GRADLE_USER_HOME/gradle.properties" | grep -vF '#' | cut -d'=' -f 2)
		fi

		local TOMCAT_FOLDER=$(grep -F 'app.server.parent.dir=' "$GIT_ROOT/gradle.properties" | grep -vF '#' | cut -d'=' -f 2)

		if [ "" == "$TOMCAT_FOLDER" ] && [ -f $GRADLE_USER_HOME/gradle.properties ]; then
			TOMCAT_FOLDER=$(grep -F 'app.server.parent.dir=' "$GRADLE_USER_HOME/gradle.properties" | grep -vF '#' | cut -d'=' -f 2)
		fi

		if [ "" == "$GRADLE_LIFERAY_HOME" ] && [ "" == "$TOMCAT_FOLDER" ]; then
			echo "Missing liferay.home and app.server.parent.dir in gradle.properties"
			return 1
		elif [ "" == "$GRADLE_LIFERAY_HOME" ]; then
			echo "Missing liferay.home in gradle.properties"
			return 1
		elif [ "" == "$TOMCAT_FOLDER" ]; then
			echo "Missing app.server.parent.dir in gradle.properties"
			return 1
		fi
	fi

	if [ "" == "$ANT_LIFERAY_HOME" ]; then
		if [ "" == "$GRADLE_LIFERAY_HOME" ]; then
			echo "Missing app.server.$USER.properties and gradle.properties"
			return 1
		fi

		if [ ! -f "$GIT_ROOT/gradle.properties" ]; then
			echo -e "\napp.server.parent.dir=$GRADLE_LIFERAY_HOME" >> $GIT_ROOT/app.server.$USER.properties
		fi

		ANT_LIFERAY_HOME=$GRADLE_LIFERAY_HOME
	fi

	if [ "$ANT_LIFERAY_HOME" != "$GRADLE_LIFERAY_HOME" ] && [ -f $GIT_ROOT/build.xml ] && [ "" != "$(grep -F setup-sdk $GIT_ROOT/build.xml)" ]; then
		if [ "" == "$GRADLE_LIFERAY_HOME" ]; then
			echo "Missing .gradle/gradle.properties, generating via ant setup-sdk"
		else
			echo "Fixing mismatch between app.server.$USER.properties and .gradle/gradle.properties via ant setup-sdk"
		fi

		pushd $GIT_ROOT > /dev/null

		ant setup-sdk
		GRADLE_LIFERAY_HOME=$ANT_LIFERAY_HOME

		popd > /dev/null
	fi

	# Update the environment variable for other scripts

	LIFERAY_HOME=$ANT_LIFERAY_HOME
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/setopts
}

repopass() {
	$(dirname "${BASH_SOURCE[0]}")/repopass
}

setopts

if [[ 0 -eq $? ]]; then
	appserveruserprops && buildprops && gradleprops && cleanappserver
fi