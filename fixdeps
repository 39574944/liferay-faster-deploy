#!/bin/bash

dirnames() {
	python $(dirname "${BASH_SOURCE[0]}")/dirnames.py
}

checkfiles() {
	local folder=$1
	local module=$2
	local package=$3

	local package_folder=$(echo $package | tr '.' '/')

	expression=$(grep -F $folder .redeploy/classes.txt | grep -F $package_folder | sed "s@.*$package_folder/@@g" | sed 's@\.java$@@g' | tr '\n' '|' | sed 's@|$@@g' | sed 's@|@\\|@g' | awk '{ print "\\(" $1 "\\)" }')

	cat .redeploy/java.txt .redeploy/jsp.txt | xargs grep -rl "$package.$expression" | grep -o '.*/src/main/' | sed 's@/src/main/@@g' >> .redeploy/fixdeps.txt
}

fixdeps() {
	cd "$GIT_ROOT"

	# Identify the base branch

	. $(dirname "${BASH_SOURCE[0]}")/getparent

	if [ "" == "$BASE_BRANCH" ]; then
		echo Unable to identify base branch
		return 1
	fi

	# Find the closest ancestor based on which one has the fewest commits

	local origin_remote=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/origin[^/]*/${BASE_BRANCH}$" | cut -d'/' -f 3)
	local upstream_remote=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/upstream[^/]*/${BASE_BRANCH}$" | cut -d'/' -f 3)
	local base_remote=

	if [[ $(git log --pretty='%H' ${origin_remote}/${BASE_BRANCH}..HEAD | wc -l) -gt $(git log --pretty='%H' ${upstream_remote}/${BASE_BRANCH}..HEAD | wc -l) ]]; then
		base_remote=$upstream_remote
	else
		base_remote=$origin_remote
	fi

	# Record all the possible module locations that we have to evaluate

	git ls-files modules | grep -vF 'modules/sdk/' > .redeploy/lsfiles.txt

	grep -F build.gradle .redeploy/lsfiles.txt | dirnames > .redeploy/gradle.txt
	grep -F bnd.bnd .redeploy/lsfiles.txt > .redeploy/bnd.txt

	cat .redeploy/gradle.txt | awk '{ print $1 "/src/main/java" }' | xargs git ls-files | grep -F .java > .redeploy/java.txt
	cat .redeploy/gradle.txt | awk '{ print $1 "/src/main/resources/META-INF/resources" }' | xargs git ls-files | grep -F .jsp > .redeploy/jsp.txt

	# Generate the source trie

	$(dirname "${BASH_SOURCE[0]}")/sourcetrie

	# Identify the package info files that changed since the latest branch

	git diff --name-only $base_remote/$BASE_BRANCH..HEAD > .redeploy/diff.txt
	grep -F packageinfo .redeploy/diff.txt > .redeploy/changes.txt
	python $(dirname "${BASH_SOURCE[0]}")/gitchanges.py

	# Find the classes corresponding to those changed packageinfo files

	expression=$(cat .redeploy/changes.txt | dirnames | sed 's@src/main/resources@src/main/java@g' | tr '\n' '|' | sed 's@|$@@g' | sed 's@|@\\|@g' | awk '{ print "\\(" $1 "\\)" }')

	grep "$expression" .redeploy/diff.txt | grep -F '.java' > .redeploy/classes.txt

	# Loop over the modules and packages that changed and update anything that depends on them

	for folder in $(cat .redeploy/changes_ant.txt); do
		local module=$(grep -F '"manifest.bundle.symbolic.name"' $folder/build.xml | grep -o 'value="[^";]*' | cut -d'"' -f 2)

		cat /dev/null > .redeploy/fixdeps.txt

		for package in $(grep -F "$folder" .redeploy/changes.txt | sed "s@$folder/src/@@g" | dirnames | tr '/' '.'); do
			echo $module $package
			checkfiles $folder $module $package
		done

		for folder in $(cat .redeploy/fixdeps.txt | sort -u); do
			sed -i.bak -e '/name: "'$module'"/ s/version: "[^"]*"/version: "default"/' $folder/build.gradle
		done
	done

	for folder in $(cat .redeploy/changes_gradle_1.txt .redeploy/changes_gradle_2.txt); do
		local module=$(grep -F 'Bundle-SymbolicName:' "$folder/bnd.bnd" | cut -d' ' -f 2)

		cat /dev/null > .redeploy/fixdeps.txt

		for package in $(grep -F "$folder" .redeploy/changes.txt | sed "s@$folder/src/main/java/@@g" | sed "s@$folder/src/main/resources/@@g" | dirnames | tr '/' '.'); do
			echo $module $package
			checkfiles $folder $module $package
		done

		local project=$(echo $folder | cut -d'/' -f 2- | sed 's@[/\\]@:@g' | sed s/.*:apps/:apps/g)

		for folder in $(cat .redeploy/fixdeps.txt | sort -u); do
			sed -i.bak -e '/name: "'$module'"/ s/group: .*/project("'$project'")/' $folder/build.gradle
		done
	done
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/setopts
}

setopts && fixdeps