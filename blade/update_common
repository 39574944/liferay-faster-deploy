#!/bin/bash

addfolder() {
	FOLDERS="$FOLDERS $1"
	GRADLE_ARGS="$GRADLE_ARGS :$(echo "$1" | tr '/' ':'):clean :$(echo "$1" | tr '/' ':'):install"
}

checksnapshots() {
	$(dirname $BASH_SOURCE[0])/../checksnapshots
}

cleanup() {
	for folder in $FOLDERS; do
		git checkout modules/$folder/bnd.bnd
		git checkout modules/$folder/build.gradle

		local BUNDLE_NAME=$(grep -F 'Bundle-SymbolicName' modules/$folder/bnd.bnd | cut -d':' -f 2 | cut -d' ' -f 2)

		rm -rf $HOME/.m2/repository/com/liferay/$BUNDLE_NAME
		rm -rf $HOME/.gradle/caches/modules-*/files-*/com.liferay/$BUNDLE_NAME
		rm -rf $HOME/.gradle/caches/modules-*/metadata-*/descriptors/com.liferay/$BUNDLE_NAME

		local GRADLE_FILES=$(find $HOME/.gradle -name "$BUNDLE_NAME-*.*")

		if [ "" != "$GRADLE_FILES" ]; then
			echo "$GRADLE_FILES" | xargs rm
		fi
	done
}

gw() {
	$(dirname $BASH_SOURCE[0])/../gw $@
}

fixgradleplugin() {
	for file in build.gradle settings.gradle; do
		if [ "" == "$(grep -F mavenLocal ${file})" ]; then
			sed -i.bak '1,$s@^\t\tmaven {@\t\tmaven {\n\t\t\tmavenLocal()@g' ${file}
			sed -i.bak '1,$s@^\t\t\tmaven {@\t\t\tmaven {\n\t\t\t\tmavenLocal()@g' ${file}
		fi
	done

	sed -i.bak "/\"com.liferay.gradle.plugins\"/s@version: \"[^\"]*\"@version: \"$GP_VERSION\"@g" \
		build.gradle \
		settings.gradle
}

fixmavenroot() {
	local MAVEN_ROOT=

	if [ -f "build.$USER.properties" ]; then
		MAVEN_ROOT=$(grep -F 'build.repository.local.dir=' "build.$USER.properties" | cut -d'=' -f 2)
	fi

	if [ "${HOME}/.m2/repository" != "$MAVEN_ROOT" ]; then
		sed -i.bak 's/build.repository.local.dir=/#build.repository.local.dir=/g' "build.$USER.properties"
		echo -e "\nbuild.repository.local.dir=${HOME}/.m2/repository" >> "build.$USER.properties"
	fi
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/../setopts
}

updatemodule() {
	sed -i.bak "/com.liferay.portal.kernel/s@version: \"[^\"]*\"@version: \"default\"@g" $1/build.gradle
	sed -i.bak "/com.liferay.portal.impl/s@version: \"[^\"]*\"@version: \"default\"@g" $1/build.gradle

	local OLD_VERSION=$(grep Bundle-Version $1/bnd.bnd | cut -d':' -f 2 | cut -d' ' -f 2)

	local NEW_MINOR_VERSION=$(echo $OLD_VERSION | cut -d'.' -f 1,2)
	local NEW_PATCH_VERSION=$(expr $(echo $OLD_VERSION | cut -d'.' -f 3) + 1)

	local NEW_VERSION=${NEW_MINOR_VERSION}.${NEW_PATCH_VERSION}
	sed -i.bak "/Bundle-Version/s@.*@Bundle-Version: $NEW_VERSION@g" $1/bnd.bnd

	if [ "" != "$2" ]; then
		local PROJECT_NAME=":$(echo $4 | tr '/' ':')"

		sed -i.bak "/$2/s@version: \"[^\"]*\"@version: \"$3\"@" $1/build.gradle
		sed -i.bak "s@project(\"$PROJECT_NAME\")@group: \"com.liferay\", name: \"$2\", version: \"$3\"@g" $1/build.gradle
	fi

	echo "$NEW_VERSION"
}

updateplugin() {
	addfolder util/$1
	addfolder sdk/$2

	local TOOL_NAME=com.liferay.$(echo $1 | cut -d'/' -f 2 | tr '-' '.')
	local TOOL_VERSION=$(updatemodule util/$1)

	local PLUGIN_NAME=com.liferay.$(echo $2 | cut -d'/' -f 2 | tr '-' '.')
	local PLUGIN_VERSION=$(updatemodule sdk/$2 $TOOL_NAME $TOOL_VERSION util/$1)

	GP_VERSION=$(updatemodule sdk/gradle-plugins $PLUGIN_NAME $PLUGIN_VERSION sdk/$2)
}

if [ "" == "$BLADE_WORKSPACE_ROOT" ]; then
	echo "Please specify BLADE_WORKSPACE_ROOT as an environment variable"
	exit 1
fi

if [ "" == "$PORTAL_SOURCE_ROOT" ]; then
	echo "Please specify PORTAL_SOURCE_ROOT as an environment variable"
	exit 1
fi

FOLDERS=
GRADLE_ARGS=

pushd $PORTAL_SOURCE_ROOT > /dev/null

setopts
fixmavenroot
checksnapshots

popd > /dev/null