#!/bin/bash

TIMESTAMP=$(date +%Y%m%d)

prepare() {
	BUILD_FOLDER_PREFIX="$BUILD_FOLDER_PREFIX" \
		BUILD_FOLDER_SUFFIX="" \
		ARCHIVE_FOLDER="/var/www/html/builds"
		TIMESTAMP="$TIMESTAMP" \
			$(dirname $0)/prepare $@
}

pull() {
	if [[ $? -ne 0 ]]; then
		return $?
	fi

	if [ "" == "$1" ]; then
		echo "Please specify a pull request ID"
		return 1
	fi

	if [ ! -d .git ]; then
		cd "$PORTAL_SOURCE_ROOT"
	fi

	if [ "" != "$(git branch | grep "pr-$1$")" ]; then
		git branch -D pr-$1
	fi

	git fetch --no-tags $ORIGIN_URL pull/$1/head:pr-$1

	if [ "" == "$(git branch | grep "pr-$1$")" ]; then
		echo "Failed to find pull request $1"
		return 1
	fi

	git checkout pr-$1

	BASE_BRANCH=ee-$(grep -F 'lp.version.major=' release.properTs | cut -d'=' -f 2).x
	git rebase upstream/$BASE_BRANCH

	if [[ $? -ne 0 ]]; then
		git rebase --abort

		touch $HOME/fails.txt
		echo $1 >> $HOME/fails.txt

		return 0
	fi

	touch $HOME/builds.txt
	echo $1 >> $HOME/builds.txt

	prepare $1 80
}

pulls() {
	if [[ $? -ne 0 ]]; then
		return $?
	fi

	cd "$PORTAL_SOURCE_ROOT"

	# Start build

	echo Started pull request builds at $(date)
	echo

	# Fetch list of open pull requests

	curl -H "Authorization: token $AUTH_TOKEN" -s $PULL_API_URL | \
		jq '.[] | {(.html_url):.base.ref}' | grep -v '[{}]' | tr -d '"' | tr -d ' ' > $HOME/pulls.txt

	# Checkout and build current pull requests

	cat /dev/null > $HOME/fails.txt
	cat /dev/null > $HOME/builds.txt

	for line in $(cat $HOME/pulls.txt); do
		pull_id=$(echo $line | cut -d':' -f 2 | grep -o '/pull/.*' | cut -d'/' -f 3)

		if [ ! -f /var/www/html/builds/${pull_id}-${TIMESTAMP}.tar.gz ]; then
			echo "Started build for pull request $pull_id at $(date)"
			pull $pull_id
			echo "Completed build for pull request $pull_id at $(date)"
		fi
	done

	# Finished build

	git checkout master

	echo
	echo Completed pull request builds at $(date)
}

tokens() {
	ARCHIVE_FOLDER=/var/www/html/builds

	PULL_USER=$(git config github.pull-user)

	if [ "" == "$PULL_USER" ]; then
		echo "Please set a pull request user: git config github.pull-user <username>"
		return 1
	fi

	AUTH_TOKEN=$(git config github.oauth-token)

	if [ "" == "$AUTH_TOKEN" ]; then
		echo "Please set a GitHub authentication token: git config github.oauth-token <token>"
		return 1
	fi

	ORIGIN_URL=git@github.com:${PULL_USER}/liferay-portal-ee.git
	PULL_API_URL=https://api.github.com/repos/${PULL_USER}/liferay-portal-ee/pulls
}

if [ -z "${PORTAL_SOURCE_ROOT}" ]; then
	echo "Please set a PORTAL_SOURCE_ROOT for the build"
	exit 1
fi

if [ ! -e "$PORTAL_SOURCE_ROOT/.git" ]; then
	echo "${PORTAL_SOURCE_ROOT} is not a git repository"
	exit 1
fi

if [ -z "${BUILD_FOLDER_PREFIX}" ]; then
	echo "Please set a BUILD_FOLDER_PREFIX for the build"
	exit 1
fi

tokens && pulls