#!/bin/bash

. "$(dirname ${BASH_SOURCE[0]})/common"

startdatabase() {
	if docker inspect ${CONTAINER_NAME} 1>/dev/null 2>/dev/null; then
		echo "Using existing container ${CONTAINER_NAME}"
		docker start ${CONTAINER_NAME}
		return 0
	fi

	docker run --name ${CONTAINER_NAME} \
		-e 'MYSQL_ALLOW_EMPTY_PASSWORD=yes' -e 'MYSQL_USER=lportal' -e 'MYSQL_PASSWORD=lportal' -e 'MYSQL_DATABASE=lportal' \
		--health-cmd='mysqladmin ping --silent' \
		--detach --expose 3306 mysql:${MYSQL_VERSION} \
		--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

	local INNODB_FILE_FORMAT='Barracuda'

	if [ "5.5" == "${MYSQL_VERSION}" ]; then
		INNODB_FILE_FORMAT='Antelope'
	fi

	echo "
[mysqld]
innodb-file-format    = ${INNODB_FILE_FORMAT}
innodb-file-per-table
innodb-large-prefix

character-set-server  = utf8mb4
collation-server      = utf8mb4_unicode_ci
" > runtime.cnf

	docker cp runtime.cnf ${CONTAINER_NAME}:/etc/mysql/conf.d/
	rm runtime.cnf

	docker restart ${CONTAINER_NAME}
}

updateprops() {
	local IP_ADDRESS=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CONTAINER_NAME})
	echo "MySQL database is started with IP address ${IP_ADDRESS}"

	echo "Updating ${LIFERAY_HOME}/portal-ext.properties with database connection information"

	if [ -f ${LIFERAY_HOME}/portal-ext.properties ]; then
		if [ "" != "$(grep -F ${IP_ADDRESS} ${LIFERAY_HOME}/portal-ext.properties | grep -vF '#')" ]; then
			return 0
		fi

		sed -i.bak 's/^jdbc.default/#jdbc.default/g' ${LIFERAY_HOME}/portal-ext.properties
	fi

	echo "
jdbc.default.driverClassName=com.mysql.jdbc.Driver
jdbc.default.url=jdbc:mysql://${IP_ADDRESS}/lportal?characterEncoding=UTF-8&dontTrackOpenResources=true&holdResultsOpenOverStatementClose=true&useFastDateParsing=false&useUnicode=true
jdbc.default.username=lportal
jdbc.default.password=lportal
" >> ${LIFERAY_HOME}/portal-ext.properties
}

waitfor_database() {
	echo 'Waiting for database startup to complete...'

	local HEALTH=$(docker inspect --format "{{json .State.Health.Status }}" ${CONTAINER_NAME} | cut -d'"' -f 2)

	while [ "healthy" != "$HEALTH" ]; do
		sleep 1
		HEALTH=$(docker inspect --format "{{json .State.Health.Status }}" ${CONTAINER_NAME} | cut -d'"' -f 2)
	done

	echo 'Database startup complete!'
}

DB_TYPE='mysql'
DRIVER='mysql.jar'

if [ "" == "${MYSQL_VERSION}" ]; then
	MYSQL_VERSION='5.7'
fi

runcontainer