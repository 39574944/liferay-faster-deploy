#!/bin/bash

containername() {
	if [[ ${BASE_BRANCH} == ee-* ]]; then
		CONTAINER_NAME=$(echo ${BASE_BRANCH} | cut -d'-' -f 2- | tr -d '.')-${DB_TYPE}
	else
		CONTAINER_NAME=$(echo ${BASE_BRANCH} | cut -d'-' -f 1 | tr -d '.')-${DB_TYPE}
	fi
}

copydriver() {
	if [ "" == "${CATALINA_HOME}" ]; then
		mkdir -p ${LIFERAY_HOME}/tomcat/lib/ext
		CATALINA_HOME=${LIFERAY_HOME}/tomcat
	fi

	if [ -f ${CATALINA_HOME}/lib/ext/${DRIVER} ]; then
		echo "Using existing ${DRIVER} in ${CATALINA_HOME}/lib/ext"
	elif [ "" == "${DRIVERS_FOLDER}" ]; then
		echo "DRIVERS_FOLDER environment variable not set."
		echo "Hopefully driver already exists"
	elif [ ! -f ${DRIVERS_FOLDER}/${DRIVER} ]; then
		echo "${DRIVER} not found. Please download it and copy it to ${DRIVERS_FOLDER}"
	else
		echo "Copying ${DRIVER} from ${DRIVERS_FOLDER} to ${CATALINA_HOME}/lib/ext"
		cp ${DRIVERS_FOLDER}/${DRIVER} ${CATALINA_HOME}/lib/ext
	fi
}

docker_cp_chown() {
	if [ "" == "${1}" ]; then
		echo "No backup specified, skipping attempt to copy backup to container"
		return 1
	fi

	if [ "" == "${CONTAINER_USER_NAME}" ]; then
		echo "Unable to restore ${1} because CONTAINER_USER_NAME is not set"
		return 1
	fi

	if [ "" == "${BACKUP_FOLDER_NAME}" ]; then
		echo "Unable to restore ${1} because BACKUP_FOLDER_NAME is not set"
		return 1
	fi

	local FILE_NAME=$(basename "$1")
	local FOLDER_NAME=${BACKUP_FOLDER_NAME}

	if [[ ${FOLDER_NAME} != */ ]]; then
		FOLDER_NAME="${FOLDER_NAME}/"
	fi

	docker exec -u root ${CONTAINER_NAME} mkdir -p "${FOLDER_NAME}"
	docker exec -u root ${CONTAINER_NAME} chown ${CONTAINER_USER_NAME}:${CONTAINER_USER_NAME} "${FOLDER_NAME}"

	docker exec -u root ${CONTAINER_NAME} rm -f "${FOLDER_NAME}${FILE_NAME}"
	docker cp "${1}" "${CONTAINER_NAME}:${FOLDER_NAME}"
	docker exec -u root ${CONTAINER_NAME} chown ${CONTAINER_USER_NAME}:${CONTAINER_USER_NAME} "${FOLDER_NAME}${FILE_NAME}"

	if [[ ${FILE_NAME} == *.zip ]]; then
		docker exec ${CONTAINER_NAME} bash -c "cd ${FOLDER_NAME} && unzip -qq ${FILE_NAME} && rm -f ${FILE_NAME}"
		docker exec ${CONTAINER_NAME} chown -R ${CONTAINER_USER_NAME}:${CONTAINER_USER_NAME} "${FOLDER_NAME}"
	elif [[ ${FILE_NAME} == *.tar.gz ]]; then
		docker exec ${CONTAINER_NAME} bash -c "cd ${FOLDER_NAME} && tar -zxf ${FILE_NAME}"
	elif [[ ${FILE_NAME} == *.gz ]]; then
		docker exec ${CONTAINER_NAME} bash -c "cd ${FOLDER_NAME} && gunzip ${FILE_NAME}"
	fi
}

liferayhome() {
	if [ "${PWD}" != "${HOME}" ] && [ -f portal-ext.properties ]; then
		LIFERAY_HOME=${PWD}
		return 0
	fi

	. $(dirname ${BASH_SOURCE[0]})/../appserverprops

	if [ "" == "${LIFERAY_HOME}" ]; then
		echo 'Please either define LIFERAY_HOME or navigate to a portal source folder'
		exit 1
	fi

	. $(dirname ${BASH_SOURCE[0]})/../getparent
}

random_password() {
	cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 30 | head -n 1
}

runcontainer() {
	containername && startdatabase && updateprops && copydriver && waitfor_database && docker_cp_chown $@ && restorebackup $@
}

liferayhome